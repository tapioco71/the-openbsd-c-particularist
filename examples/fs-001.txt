#define FS_MAGIC 0x011954

struct fs {
  int32_t  fs_firstfield; /* historic file system linked list, */
  int32_t  fs_unused_1;   /*     used for incore super blocks */
  int32_t  fs_sblkno;     /* addr of super-block / frags */
  int32_t  fs_cblkno;     /* offset of cyl-block / frags */
  int32_t  fs_iblkno;     /* offset of inode-blocks / frags */
  int32_t  fs_dblkno;     /* offset of first data / frags */
  int32_t  fs_cgoffset;   /* cylinder group offset in cylinder */
  int32_t  fs_cgmask;     /* used to calc mod fs_ntrak */
  int32_t  fs_ffs1_time;  /* last time written */
  int32_t  fs_ffs1_size;  /* # of blocks in fs / frags */
  int32_t  fs_ffs1_dsize; /* # of data blocks in fs */
  int32_t  fs_ncg;        /* # of cylinder groups */
  int32_t  fs_bsize;      /* size of basic blocks / bytes */
  int32_t  fs_fsize;      /* size of frag blocks / bytes */
  int32_t  fs_frag;       /* # of frags in a block in fs */
  /* these are configuration parameters */
  int32_t  fs_minfree;    /* minimum percentage of free blocks */
  int32_t  fs_rotdelay;   /* # of ms for optimal next block */
  int32_t  fs_rps;        /* disk revolutions per second */
  /* these fields can be computed from the others */
  int32_t  fs_bmask;      /* ``blkoff'' calc of blk offsets */
  int32_t  fs_fmask;      /* ``fragoff'' calc of frag offsets */
  int32_t  fs_bshift;     /* ``lblkno'' calc of logical blkno */
  int32_t  fs_fshift;     /* ``numfrags'' calc # of frags */
  /* these are configuration parameters */
  int32_t  fs_maxcontig;  /* max # of contiguous blks */
  int32_t  fs_maxbpg;     /* max # of blks per cyl group */
  /* these fields can be computed from the others */
  int32_t  fs_fragshift;  /* block to frag shift */
  int32_t  fs_fsbtodb;    /* fsbtodb and dbtofsb shift constant */
  int32_t  fs_sbsize;     /* actual size of super block */
  int32_t  fs_csmask;     /* csum block offset (now unused) */
  int32_t  fs_csshift;    /* csum block number (now unused) */
  int32_t  fs_nindir;     /* value of NINDIR */
  int32_t  fs_inopb;      /* inodes per file system block */
  int32_t  fs_nspf;       /* DEV_BSIZE sectors per frag */
  /* yet another configuration parameter */
  int32_t  fs_optim;      /* optimization preference, see below */
  /* these fields are derived from the hardware */
  int32_t  fs_npsect;     /* DEV_BSIZE sectors/track + spares */
  int32_t  fs_interleave; /* DEV_BSIZE sector interleave */
  int32_t  fs_trackskew;  /* sector 0 skew, per track */
  /* fs_id takes the space of unused fs_headswitch and fs_trkseek fields */
  int32_t  fs_id[2];      /* unique filesystem id */
  /* sizes determined by number of cylinder groups and their sizes */
  int32_t  fs_ffs1_csaddr; /* blk addr of cyl grp summary area */
  int32_t  fs_cssize;     /* cyl grp summary area size / bytes */
  int32_t  fs_cgsize;     /* cyl grp block size / bytes */
  /* these fields are derived from the hardware */
  int32_t  fs_ntrak;      /* tracks per cylinder */
  int32_t  fs_nsect;      /* DEV_BSIZE sectors per track */
  int32_t  fs_spc;        /* DEV_BSIZE sectors per cylinder */
  /* this comes from the disk driver partitioning */
  int32_t  fs_ncyl;       /* cylinders in file system */
  /* these fields can be computed from the others */
  int32_t  fs_cpg;        /* cylinders per group */
  int32_t  fs_ipg;        /* inodes per group */
  int32_t  fs_fpg;        /* blocks per group * fs_frag */
  /* this data must be re-computed after crashes */
  struct  csum fs_ffs1_cstotal; /* cylinder summary information */
  /* these fields are cleared at mount time */
  int8_t   fs_fmod;       /* super block modified flag */
  int8_t   fs_clean;      /* file system is clean flag */
  int8_t   fs_ronly;      /* mounted read-only flag */
  int8_t   fs_ffs1_flags; /* see FS_ below */
  u_char   fs_fsmnt[MAXMNTLEN]; /* name mounted on */
  u_char   fs_volname[MAXVOLLEN]; /* volume name */
  u_int64_t fs_swuid;     /* system-wide uid */
  int32_t  fs_pad;        /* due to alignment of fs_swuid */
  /* these fields retain the current block allocation info */
  int32_t  fs_cgrotor;     /* last cg searched */
  void    *fs_ocsp[NOCSPTRS]; /* padding; was list of fs_cs bufs */
  u_int8_t *fs_contigdirs; /* # of contiguously allocated dirs */
  struct csum *fs_csp;     /* cg summary info buffer for fs_cs */
  int32_t *fs_maxcluster;  /* max cluster in each cyl group */
  u_char  *fs_active;      /* reserved for snapshots */
  int32_t  fs_cpc;         /* cyl per cycle in postbl */
  /* this area is only allocated if fs_ffs1_flags & FS_FLAGS_UPDATED */
  int32_t  fs_maxbsize;   /* maximum blocking factor permitted */
  int64_t  fs_spareconf64[17]; /* old rotation block list head */
  int64_t  fs_sblockloc;  /* offset of standard super block */
  struct csum_total fs_cstotal; /* cylinder summary information */
  int64_t  fs_time;       /* time last written */
  int64_t  fs_size;       /* number of blocks in fs */
  int64_t  fs_dsize;      /* number of data blocks in fs */
  int64_t  fs_csaddr;     /* blk addr of cyl grp summary area */
  int64_t  fs_pendingblocks; /* blocks in process of being freed */
  int32_t  fs_pendinginodes; /* inodes in process of being freed */
  int32_t  fs_snapinum[FSMAXSNAP];/* space reserved for snapshots */
  /* back to stuff that has been around a while */
  int32_t  fs_avgfilesize; /* expected average file size */
  int32_t  fs_avgfpdir;    /* expected # of files per directory */
  int32_t  fs_sparecon[26];/* reserved for future constants */
  u_int32_t fs_flags;     /* see FS_ flags below */
  int32_t  fs_fscktime;    /* last time fsck(8)ed */
  int32_t  fs_contigsumsize; /* size of cluster summary array */
  int32_t  fs_maxsymlinklen; /* max length of an internal symlink */
  int32_t  fs_inodefmt;    /* format of on-disk inodes */
  u_int64_t fs_maxfilesize;/* maximum representable file size */
  int64_t  fs_qbmask;      /* ~fs_bmask - for use with quad size */
  int64_t  fs_qfmask;      /* ~fs_fmask - for use with quad size */
  int32_t  fs_state;       /* validate fs_clean field */
  int32_t  fs_postblformat;/* format of positional layout tables */
  int32_t  fs_nrpos;       /* number of rotational positions */
  int32_t  fs_postbloff;   /* (u_int16) rotation block list head */
  int32_t  fs_rotbloff;    /* (u_int8) blocks for each rotation */
  int32_t  fs_magic;       /* magic number */
  u_int8_t fs_space[1];    /* list of blocks for each rotation */
  /* actually longer */
};
