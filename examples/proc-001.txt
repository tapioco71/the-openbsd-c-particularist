struct proc {
  TAILQ_ENTRY(proc) p_runq;       /* [S] current run/sleep queue */
  LIST_ENTRY(proc) p_list;        /* List of all threads. */

  struct  process *p_p;           /* [I] The process of this thread. */
  TAILQ_ENTRY(proc) p_thr_link;   /* Threads in a process linkage. */

  TAILQ_ENTRY(proc) p_fut_link;   /* Threads in a futex linkage. */
  struct  futex   *p_futex;       /* Current sleeping futex. */

  /* substructures: */
  struct  filedesc *p_fd;         /* copy of p_p->ps_fd */
  struct  vmspace *p_vmspace;     /* [I] copy of p_p->ps_vmspace */
  struct  p_inentry p_spinentry;  /* [o] cache for SP check */
  struct  p_inentry p_pcinentry;  /* [o] cache for PC check */

  int     p_flag;                 /* P_* flags. */
  u_char  p_spare;                /* unused */
  char    p_stat;                 /* [S] S* process status. */
  u_char  p_runpri;               /* [S] Runqueue priority */
  u_char  p_descfd;               /* if not 255, fdesc permits this fd */

  pid_t   p_tid;                  /* Thread identifier. */
  LIST_ENTRY(proc) p_hash;        /* Hash chain. */

  int     p_dupfd;         /* Sideways return value from filedescopen. XXX */

  /* scheduling */
  int     p_cpticks;       /* Ticks of cpu time. */
  const volatile void *p_wchan;   /* [S] Sleep address. */
  struct  timeout p_sleep_to;/* timeout for tsleep() */
  const char *p_wmesg;            /* [S] Reason for sleep. */
  fixpt_t p_pctcpu;               /* [S] %cpu for this thread */
  u_int   p_slptime;              /* [S] Time since last blocked. */
  u_int   p_uticks;               /* Statclock hits in user mode. */
  u_int   p_sticks;               /* Statclock hits in system mode. */
  u_int   p_iticks;               /* Statclock hits processing intr. */
  struct  cpu_info * volatile p_cpu; /* [S] CPU we're running on. */

  struct  rusage p_ru;            /* Statistics */
  struct  tusage p_tu;            /* accumulated times. */

  struct  plimit  *p_limit;       /* [l] read ref. of p_p->ps_limit */
  struct  kcov_dev *p_kd;         /* kcov device handle */
  struct  lock_list_entry *p_sleeplocks;  /* WITNESS lock tracking */
  struct  kqueue *p_kq;           /* [o] select/poll queue of evts */

  int      p_siglist;             /* [a] Signals arrived & not delivered*/

  sigset_t p_sigmask;             /* [a] Current signal mask */

  char    p_name[_MAXCOMLEN];     /* thread name, incl NUL */
  u_char  p_slppri;               /* [S] Sleeping priority */
  u_char  p_usrpri;       /* [S] Priority based on p_estcpu & ps_nice */
  u_int   p_estcpu;               /* [S] Time averaged val of p_cpticks */
  int     p_pledge_syscall;       /* Cache of current syscall */

  struct  ucred *p_ucred;         /* [o] cached credentials */
  struct  sigaltstack p_sigstk;   /* sp & on stack state variable */

  u_long  p_prof_addr;    /* tmp storage for profiling addr until AST */
  u_long  p_prof_ticks;   /* tmp storage for profiling ticks until AST */

  struct  user *p_addr;   /* Kernel virtual addr of u-area */
  struct  mdproc p_md;    /* Any machine-dependent fields. */

  sigset_t p_oldmask;     /* Saved mask from before sigpause */
  int     p_sisig;        /* For core dump/debugger XXX */
  union sigval p_sigval;  /* For core dump/debugger XXX */
  long    p_sitrapno;     /* For core dump/debugger XXX */
  int     p_sicode;       /* For core dump/debugger XXX */
};
