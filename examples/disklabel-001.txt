struct disklabel {
  u_int32_t d_magic;              /* the magic number */
  u_int16_t d_type;               /* drive type */
  u_int16_t d_subtype;            /* controller/d_type specific */
  char      d_typename[16];       /* type name, e.g. "eagle" */
  char      d_packname[16];       /* pack identifier */

  /* disk geometry: */
  u_int32_t d_secsize;            /* # of bytes per sector */
  u_int32_t d_nsectors;           /* # of data sectors per track */
  u_int32_t d_ntracks;            /* # of tracks per cylinder */
  u_int32_t d_ncylinders;         /* # of data cylinders per unit */
  u_int32_t d_secpercyl;          /* # of data sectors per cylinder */
  u_int32_t d_secperunit;         /* # of data sectors (low part) */

  u_char  d_uid[8];               /* Unique label identifier. */

  /*
   * Alternate cylinders include maintenance, replacement, configuration
   * description areas, etc.
   */
  u_int32_t d_acylinders;         /* # of alt. cylinders per unit */
  /* hardware characteristics: */
  u_int16_t d_bstarth;            /* start of useable region (high part) */
  u_int16_t d_bendh;              /* size of useable region (high part) */
  u_int32_t d_bstart;             /* start of useable region */
  u_int32_t d_bend;               /* end of useable region */
  u_int32_t d_flags;              /* generic flags */
  u_int32_t d_spare4[NDDATA];
  u_int16_t d_secperunith;        /* # of data sectors (high part) */
  u_int16_t d_version;            /* version # (1=48 bit addressing) */
  u_int32_t d_spare[NSPARE];      /* reserved for future use */
  u_int32_t d_magic2;             /* the magic number (again) */
  u_int16_t d_checksum;           /* xor of data incl. partitions */

  /* filesystem and partition information: */
  u_int16_t d_npartitions;        /* number of partitions in following */
  u_int32_t d_spare2;
  u_int32_t d_spare3;
  struct  partition {             /* the partition table */
    u_int32_t p_size;       /* number of sectors (low part) */
    u_int32_t p_offset;     /* starting sector (low part) */
    u_int16_t p_offseth;    /* starting sector (high part) */
    u_int16_t p_sizeh;      /* number of sectors (high part) */
    u_int8_t p_fstype;      /* filesystem type, see below */
    u_int8_t p_fragblock;   /* encoded filesystem frag/block */
    u_int16_t p_cpg;        /* UFS: FS cylinders per group */
  } d_partitions[MAXPARTITIONS];  /* actually may be more */
};
