#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass memoir
\use_default_options true
\master the-openbsd-c-particularist.lyx
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.7cm
\topmargin 1cm
\rightmargin 1.5cm
\bottommargin 1.2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:processing-signals"

\end_inset

Processing Signals.
\end_layout

\begin_layout Standard
\align right
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:overview-of-signal-handling"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:the-signals"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:sending-signals"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:catching-and-ignoring-signals"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:using-signals-for-timeouts"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:the-openbsd-signal-mechanism"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Signals are software interrupts that are delivered to processes to inform
 them of abnormal events occuring in their environment.
 Some signals such as 
\shape italic
floating point exception
\shape default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
floating point exception
\end_layout

\end_inset

, have a direct counterparts in the computer hardware; other signals, such
 as 
\shape italic
change in child process status
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape italic
change in child process status
\end_layout

\end_inset

, are purely software-oriented.
 In OpenBSD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 most of the signals cause a process to terminate when they are received.
 Depending on the signal, the memory image of the executing process may
 be placed on the disk in the file 
\shape italic
core
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape italic
core
\end_layout

\end_inset


\shape default
.
 This is the familiar 
\shape italic
core dump
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape italic
core dump
\end_layout

\end_inset


\shape default
; it is often useful when debugging a broken program.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:overview-of-signal-handling"

\end_inset

Overview of Signal Handling.
\end_layout

\begin_layout Standard
OpenBSD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 system defines a set of signals that may be delivered to a process.
 Signal delivery resembles the occurrence of a hardware interrupt:
\end_layout

\begin_layout Enumerate
the signal is normally blocked from further occurrence;
\end_layout

\begin_layout Enumerate
the current process context is saved, and a new one is built.
\end_layout

\begin_layout Standard
A process may specify a handler to which a signal is delivered, or specify
 that a signal is to be ignored.
 A process may also specify that a default action is to be taken by the
 system when a signal occurs.
 A signal may also be blocked, in which case its delivery is postponed until
 it is unblocked.
 The action to be taken on delivery is determined at the time of delivery.
 Normally, signal handlers execute on the current stack of the process.
 This may be changed, on a per-handler basis, so that signals are taken
 on a special signal stack.
 Signal routines normally execute with the signal that caused their invocation
 blocked, but other signals may yet occur.
 A global signal mask defines the set of signals currently blocked from
 delivery to a process.
 The signal mask for a process is initialized from that of its parent, normally
 empty.
 It may be changed with a 
\shape italic
sigprocmask
\shape default
(2) call, or when a signal is delivered to the process.
 When a signal condition arises for a process, the signal is added to a
 set of signals pending for the process.
 If the signal is not currently blocked by the process then it is delivered
 to the process.
 Signals may be delivered any time a process enters the operating system
\begin_inset Foot
status open

\begin_layout Plain Layout
E.g., during a system call, page fault or trap, or clock interrupt.
\end_layout

\end_inset

.
 If multiple signals are ready to be delivered at the same time, any signals
 that could be caused by traps are delivered first.
 Additional signals may be processed at the same time, with each appearing
 to interrupt the handlers for the previous signals before their first instructi
ons.
 The set of pending signals is returned by the 
\shape italic
sigpending
\shape default
(2) function.
 When a caught signal is delivered, the current state of the process is
 saved, a new signal mask is calculated, as described below and the signal
 handler is invoked.
 The call to the handler is arranged so that if the signal handling routine
 returns normally the process will resume execution in the context from
 before the signal's delivery.
 If the process wishes to resume in a different context, then it must arrange
 to restore the previous context itself.
 When a signal is delivered to a process, a new signal mask is installed
 for the duration of the process's signal handler, or until a 
\shape italic
sigprocmask
\shape default
(2) call is made.
 This mask is formed by taking the union of the current signal mask set,
 the signal to be delivered, and the signal mask 
\family typewriter
sa_mask
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_mask
\end_layout

\end_inset


\family default
 associated with the handler to be invoked, but always excluding 
\family typewriter
SIGKILL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGKILL
\end_layout

\end_inset


\family default
 and 
\family typewriter
SIGSTOP
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGSTOP
\end_layout

\end_inset


\family default
.
 
\end_layout

\begin_layout Subsection
The sigaction interface.
\end_layout

\begin_layout Standard
The following structure, defined in 
\family typewriter
<signal.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<signal.h>
\end_layout

\end_inset


\family default
 allow the programmer to configure the behaviour of the process in response
 to signals coming in.
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:sigaction-struct"

\end_inset

The sigaction structure.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

struct sigaction {
\end_layout

\begin_layout Plain Layout

  union {
\end_layout

\begin_layout Plain Layout

    void (*__sa_handler)(int);
\end_layout

\begin_layout Plain Layout

    void (*__sa_sigaction)(int, siginfo_t *, void *);
\end_layout

\begin_layout Plain Layout

  } __sigaction_u;
\end_layout

\begin_layout Plain Layout

  sigset_t sa_mask;
\end_layout

\begin_layout Plain Layout

  int sa_flags;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The system call
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
system call
\end_layout

\end_inset


\family typewriter
 sigaction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigaction
\end_layout

\end_inset


\family default
 assigns an action for a signal.
 It takes three arguments: the first argument is the signal itself.
 If the second argument is non-zero, it specifies an action: 
\family typewriter
SIG_DFL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIG_DFL
\end_layout

\end_inset


\family default
, 
\family typewriter
SIG_IGN
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIG_IGN
\end_layout

\end_inset


\family default
, or a handler routine and mask to be used when delivering the specified
 signal.
 If the third argument is non-zero, the previous handling information for
 the signal is returned to the user.
 Once a signal handler is installed, it normally remains installed until
 another 
\family typewriter
sigaction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigaction
\end_layout

\end_inset


\family default
 call is made, or an 
\shape italic
execve
\shape default
(2) is performed.
 The value of 
\family typewriter
sa_handler
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_handler
\end_layout

\end_inset


\family default
 or, if the 
\family typewriter
SA_SIGINFO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_SIGINFO
\end_layout

\end_inset


\family default
 flag is set, the value of 
\family typewriter
sa_sigaction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_sigaction
\end_layout

\end_inset


\family default
 instead, indicates what action should be performed when a signal arrives.
 A signal-specific default action may be reset by setting 
\family typewriter
sa_handler
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_handler
\end_layout

\end_inset


\family default
 to 
\family typewriter
SIG_DFL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIG_DFL
\end_layout

\end_inset


\family default
.
 Alternately, if the 
\family typewriter
SA_RESETHAND
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_RESETHAND
\end_layout

\end_inset


\family default
 flag is set the default action will be reinstated when the signal is first
 posted.
 The defaults are process termination, possibly with core dump; no action;
 stopping the process; or continuing the process.
 If 
\family typewriter
sa_handler
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_handler
\end_layout

\end_inset


\family default
 is 
\family typewriter
SIG_DFL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIG_DFL
\end_layout

\end_inset


\family default
, the default action for the signal is to discard the signal, and if a signal
 is pending, the pending signal is discarded even if the signal is masked.
 If 
\family typewriter
sa_handler
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_handler
\end_layout

\end_inset


\family default
 is set to 
\family typewriter
SIG_IGN
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIG_IGN
\end_layout

\end_inset


\family default
, current and pending instances of the signal are ignored and discarded.
 If the first argument of 
\family typewriter
sigaction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigaction
\end_layout

\end_inset


\family default
 is 
\family typewriter
SIGCHLD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGCHLD
\end_layout

\end_inset


\family default
 and 
\family typewriter
sa_handler
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_handler
\end_layout

\end_inset


\family default
 is set to 
\family typewriter
SIG_IGN
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIG_IGN
\end_layout

\end_inset


\family default
, the 
\family typewriter
SA_NOCLDWAIT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_NOCLDWAIT
\end_layout

\end_inset


\family default
 flag is implied.
 The signal mask 
\family typewriter
sa_mask
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_mask
\end_layout

\end_inset


\family default
 is typically manipulated using the 
\shape italic
sigaddset
\shape default
(3) family of functions.
 Options may be specified by setting 
\family typewriter
sa_flags
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_flags
\end_layout

\end_inset


\family default
.
 The meaning of the various bits is as follows:
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000
\noindent

\family typewriter
SA_NOCLDSTOP
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_NOCLDSTOP
\end_layout

\end_inset


\family default
 If this bit is set when installing a catching function for the 
\family typewriter
SIGCHLD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGCHLD
\end_layout

\end_inset


\family default
 signal, the 
\family typewriter
SIGCHLD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGCHLD
\end_layout

\end_inset


\family default
 signal will be generated only when a child process exits, not when a child
 process stops.
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
SA_NOCLDWAIT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_NOCLDWAIT
\end_layout

\end_inset


\family default
 If this bit is set when calling 
\family typewriter
sigaction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigaction
\end_layout

\end_inset


\family default
 for the 
\family typewriter
SIGCHLD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGCHLD
\end_layout

\end_inset


\family default
 signal, the system will not create zombie processes when children of the
 calling process exit, though existing zombies will remain.
 If the calling process subsequently issues a 
\shape italic
waitpid
\shape default
(2), or equivalent and there are no previously existing zombie child processes
 that match the 
\shape italic
waitpid
\shape default
(2) criteria, it blocks until all of the calling process's child processes
 that would match terminate, and then returns a value of -1 with errno set
 to 
\family typewriter
ECHILD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
ECHILD
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
SA_ONSTACK
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_ONSTACK
\end_layout

\end_inset


\family default
 If this bit is set, the system will deliver the signal to the process on
 a signal stack, specified with 
\shape italic
sigaltstack
\shape default
(2).
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
SA_NODEFER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_NODEFER
\end_layout

\end_inset


\family default
 If this bit is set, further occurrences of the delivered signal are not
 masked during the execution of the handler.
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
SA_RESETHAND
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_RESETHAND
\end_layout

\end_inset


\family default
 If this bit is set, the handler is reset back to 
\family typewriter
SIG_DFL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIG_DFL
\end_layout

\end_inset


\family default
 at the moment the signal is delivered.
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
SA_SIGINFO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_SIGINFO
\end_layout

\end_inset


\family default
 If this bit is set, the second argument of the handler is set to be a pointer
 to a 
\family typewriter
siginfo_t
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
siginfo_t
\end_layout

\end_inset


\family default
 structure as described in 
\family typewriter
<sys/siginfo.h>
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
<sys/siginfo.h>
\end_layout

\end_inset


\family default
.
 It provides much more information about the causes and attributes of the
 signal that is being delivered.
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
SA_RESTART
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_RESTART
\end_layout

\end_inset


\family default
 If a signal is caught during the system calls listed below, the call may
 be forced to terminate with the error 
\family typewriter
EINTR
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
EINTR
\end_layout

\end_inset


\family default
, the call may return with a data transfer shorter than requested, or the
 call may be restarted.
 Restarting of pending calls is requested by setting the 
\family typewriter
SA_RESTART
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_RESTART
\end_layout

\end_inset


\family default
 bit in 
\family typewriter
sa_flags
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa_flags
\end_layout

\end_inset


\family default
.
 The affected system calls include 
\shape italic
read
\shape default
(2), 
\shape italic
write
\shape default
(2), 
\shape italic
sendto
\shape default
(2), 
\shape italic
recvfrom
\shape default
(2), 
\shape italic
sendmsg
\shape default
(2) and 
\shape italic
recvmsg
\shape default
(2) on a communications channel or a slow device
\begin_inset Foot
status open

\begin_layout Plain Layout
Such as a terminal, but not a regular file.
\end_layout

\end_inset

 and during a 
\shape italic
wait
\shape default
(2) or 
\shape italic
ioctl
\shape default
(2).
 However, calls that have already committed are not restarted, but instead
 return a partial success, for example, a short read count.
\end_layout

\begin_layout Standard
\noindent
After a 
\shape italic
fork
\shape default
(2) or 
\shape italic
vfork
\shape default
(2), all signals, the signal mask, the signal stack, and the restart/interrupt
 flags are inherited by the child.
 
\shape italic
execve
\shape default
(2) reinstates the default action for 
\family typewriter
SIGCHLD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGCHLD
\end_layout

\end_inset


\family default
 and all signals which were caught; all other signals remain ignored.
 All signals are reset to be caught on the user stack and the signal mask
 remains the same; signals that restart pending system calls continue to
 do so.
 Upon successful completion, the value 0 is returned by 
\family typewriter
sigaction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigaction
\end_layout

\end_inset


\family default
; otherwise the value -1 is returned and the global variable 
\family typewriter
errno
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 is set to indicate the error.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:the-signals"

\end_inset

The Signals.
\end_layout

\begin_layout Standard
OpenBSD
\begin_inset Index idx
status open

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 provides the following signals with names as in the include file 
\family typewriter
<signal.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<signal.h>
\end_layout

\end_inset


\family default
:
\begin_inset Tabular
<lyxtabular version="3" rows="34" columns="4">
<features booktabs="true" islongtable="true" headTopDL="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="block" valignment="top" width="3cm">
<column alignment="block" valignment="top" width="3cm">
<row caption="true">
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:signals"

\end_inset

List of available signals.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Value
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Default Action
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGHUP
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGHUP
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminal line hangup
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGINT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGINT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
interrupt program
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGQUIT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGQUIT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
quit program
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGILL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGILL
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
illegal instruction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGTRAP
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTRAP
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
trace trap
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGABRT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGABRT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
abort
\shape default
(3) call, formerly SIGIOT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGEMT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGEMT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
emulate instruction executed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGFPE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGFPE
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
floating-point exception
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGKILL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGKILL
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
kill program, cannot be caught or ignored
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGBUS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGBUS
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bus error
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGSEGV
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGSEGV
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
segmentation violation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGSYS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGSYS
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create core image
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
system call given invalid argument
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGPIPE
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGPIPE
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
write on a pipe with no reader
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGALRM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGALRM
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
real-time timer expired
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGTERM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTERM
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
software termination signal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGURG
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGURG
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
discard signal
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
urgent condition present on socket
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGSTOP
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGSTOP
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stop process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stop, cannot be caught or ignored
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGTSTP
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTSTP
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stop process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stop signal generated from keyboard
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGCONT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGCONT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
discard signal
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
continue after stop
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGCHLD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGCHLD
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
discard signal
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
child status has changed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGTTIN
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTTIN
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stop process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
background read attempted from controlling terminal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGTTOU
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTTOU
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stop process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
background write attempted to controlling terminal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGIO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGIO
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
discard signal
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
I/O is possible on a descriptor
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See 
\shape italic
fcntl
\shape default
(2).
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGXCPU
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGXCPU
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU time limit exceeded
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See 
\shape italic
setrlimit
\shape default
(2).
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGXFSZ
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGXFSZ
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
file size limit exceeded
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See 
\shape italic
setrlimit
\shape default
(2).
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGVTALRM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGVTALRM
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
virtual time alarm
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See 
\shape italic
setitimer
\shape default
(2).
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGPROF
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGPROF
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
profiling timer alarm
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See 
\shape italic
setitimer
\shape default
(2).
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGWINCH
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGWINCH
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
discard signal
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
window size change
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGINFO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGINFO
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
discard signal
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
status request from keyboard
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGUSR1
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGUSR1
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
user-defined signal 1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGUSR2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGUSR2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
terminate process
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
user-defined signal 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SIGTHR
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTHR
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
discard signal
\end_layout

\end_inset
</cell>
<cell alignment="block" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thread AST
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:sending-signals"

\end_inset

Sending Signals.
\end_layout

\begin_layout Standard
The 
\shape italic
kill
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape italic
kill
\end_layout

\end_inset


\shape default
 function sends the specified signal to a pid.
 It takes two arguments: the first is the signal as listed in the previous
 section.
 The second argument is the pid of a process or a group of processes.
 This argument may be one of the signals specified in 
\shape italic
sigaction
\shape default
(2) or it may be 0, in which case error checking is performed but no signal
 is actually sent.
 This can be used to check the validity of pid.
 For a process to have permission to send a signal to a process designated
 by pid, the real or effective user id of the receiving process must match
 that of the sending process or the user must have appropriate privileges,
 such as given by a set-user-ID
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
set-user-ID
\end_layout

\end_inset

 program or the user is the super-user
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
super-user
\end_layout

\end_inset

.
 A single exception is the signal 
\family typewriter
SIGCONT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGCONT
\end_layout

\end_inset


\family default
, which may always be sent to any process with the same session id as the
 caller.
\end_layout

\begin_layout Itemize
if pid is greater than zero: sig is sent to the process whose id is equal
 to pid;
\end_layout

\begin_layout Itemize
if pid is zero: sig is sent to all processes whose group id is equal to
 the process group id of the sender, and for which the process has permission;
 this is a variant of 
\shape italic
killpg
\shape default
(3);
\end_layout

\begin_layout Itemize
if pid is -1: If the user has super-user
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
super-user
\end_layout

\end_inset

 privileges, the signal is sent to all processes excluding system processes
 and the process sending the signal.
 If the user is not the super-user
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
super-user
\end_layout

\end_inset

, the signal is sent to all processes with the same uid
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
uid
\end_layout

\end_inset

 as the user excluding the process sending the signal.
 No error is returned if any process could be signaled;
\end_layout

\begin_layout Itemize
if pid is negative but not -1: sig is sent to all processes whose process
 group id
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
group id
\end_layout

\end_inset

 is equal to the absolute value of pid; this is a variant of 
\shape italic
killpg
\shape default
(3).
\end_layout

\begin_layout Standard
If the value of the first argument causes the signal to be sent to the calling
 process, either this argument or at least one pending unblocked signal
 will be delivered before 
\family typewriter
kill
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
kill
\end_layout

\end_inset


\family default
 returns unless the signal is blocked in the calling thread, the signal
 is unblocked in another thread, or another thread is waiting for the signal
 in 
\shape italic
sigwait
\shape default
().
 Setuid and setgid processes are dealt with slightly differently.
 For the non-root user, to prevent attacks against such processes, some
 signal deliveries are not permitted and return the error 
\family typewriter
EPERM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
EPERM
\end_layout

\end_inset


\family default
.
 The following signals are allowed through to this class of processes: 
\family typewriter
SIGKILL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGKILL
\end_layout

\end_inset


\family default
, 
\family typewriter
SIGINT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGINT
\end_layout

\end_inset


\family default
, 
\family typewriter
SIGTERM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTERM
\end_layout

\end_inset


\family default
, 
\family typewriter
SIGSTOP
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGSTOP
\end_layout

\end_inset


\family default
, 
\family typewriter
SIGTTIN
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTTIN
\end_layout

\end_inset


\family default
, 
\family typewriter
SIGTTOU
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTTOU
\end_layout

\end_inset


\family default
, 
\family typewriter
SIGTSTP
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGTSTP
\end_layout

\end_inset


\family default
, 
\family typewriter
SIGHUP
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGHUP
\end_layout

\end_inset

, 
\family typewriter
SIGUSR1
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGUSR1
\end_layout

\end_inset


\family default
, 
\family typewriter
SIGUSR2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGUSR2
\end_layout

\end_inset


\family default
.
 Upon successful completion, the value 0 is returned; otherwise the value -1
 is returned and the global variable 
\family typewriter
errno
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 is set to indicate the error.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:catching-and-ignoring-signals"

\end_inset

Catching and Ignoring Signals.
\end_layout

\begin_layout Standard
Using the sigaction structure to configure signals and the sigaction to
 attach the handler function to the signal event led us to the Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:sigaction"
plural "false"
caps "false"
noprefix "false"

\end_inset

 where two signals are configured: 
\family typewriter
SIGUSR1
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGUSR1
\end_layout

\end_inset


\family default
 and 
\family typewriter
SIGUSR2
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGUSR2
\end_layout

\end_inset


\family default
.
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:sigaction"

\end_inset

sigaction - shows how to intercept/ignore signals.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c-mode; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* sigaction.c file.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <fcntl.h>
\end_layout

\begin_layout Plain Layout

#include <errno.h>
\end_layout

\begin_layout Plain Layout

#include <signal.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* sigaction program.
 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

void handler(int);
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Global variables.
 */
\end_layout

\begin_layout Plain Layout

struct sigaction sa = {
\end_layout

\begin_layout Plain Layout

	handler,
\end_layout

\begin_layout Plain Layout

	SIGUSR1,
\end_layout

\begin_layout Plain Layout

	SA_SIGINFO
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct sigaction sb = {
\end_layout

\begin_layout Plain Layout

	SIG_IGN,
\end_layout

\begin_layout Plain Layout

	SIGUSR2,
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Setup signal handler for this process.
 */
\end_layout

\begin_layout Plain Layout

	if(sigaction(SIGUSR1, &sa, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

		if(sigaction(SIGUSR2, &sb, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

			ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

			pause();
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			perror("Could not setup SIGUSR2");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		perror("Could not setup SIGUSR1");
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void handler(int si)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	/* Saving the current errno value.
 */
\end_layout

\begin_layout Plain Layout

	int save_errno = errno;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Handler code.
 */
\end_layout

\begin_layout Plain Layout

	printf("Entering handler.
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* ...
 */
\end_layout

\begin_layout Plain Layout

	printf("Signal passed to handler: %d
\backslash
n", si);
\end_layout

\begin_layout Plain Layout

	printf("Exiting handler.
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Restore the old errno value.
 */
\end_layout

\begin_layout Plain Layout

	errno = save_errno;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of sigaction.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The first is intercepted and handled in the handler function.
 The second is ignored.
 Note the 
\family typewriter
sa
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa
\end_layout

\end_inset


\family default
 and 
\family typewriter
sb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sb
\end_layout

\end_inset


\family default
 object of type 
\family typewriter
struct sigaction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
struct sigaction
\end_layout

\end_inset


\family default
: the first configuration for 
\family typewriter
sa
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sa
\end_layout

\end_inset


\family default
 set to intercept the signal 
\family typewriter
SIGUSR1
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGUSR1
\end_layout

\end_inset


\family default
 and fill the 
\family typewriter
int
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset


\family default
 parameter passed to the handler with it.
 The reader should compile and execute the program that will wait until
 a signal is sent to it.
 Using 
\shape italic
kill
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape italic
kill
\end_layout

\end_inset


\shape default
 command, from a different console, the user may try:
\end_layout

\begin_layout Standard
\noindent

\family typewriter
\begin_inset listings
lstparams "language=ksh,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

$ ps ax | grep sigaction
\end_layout

\begin_layout Plain Layout

22948 p7  R+/1     0:00.00 grep sigaction
\end_layout

\begin_layout Plain Layout

$ kill -s SIGUSR2 22948
\end_layout

\begin_layout Plain Layout

$ ps ax | grep sigaction
\end_layout

\begin_layout Plain Layout

22948 p7  R+/1     0:00.00 grep sigaction
\end_layout

\begin_layout Plain Layout

$ kill -s SIGUSR1 22948
\end_layout

\begin_layout Plain Layout

$ ps ax | grep sigaction
\end_layout

\begin_layout Plain Layout

$ 
\end_layout

\end_inset


\family default
on the program console we can read these messages:
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset listings
lstparams "language=ksh,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

Entering handler.
\end_layout

\begin_layout Plain Layout

Signal passed to handler: 30
\end_layout

\begin_layout Plain Layout

Exiting handler.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Catching Signals.
\end_layout

\begin_layout Standard
A signal
\begin_inset Index idx
status open

\begin_layout Plain Layout
signal
\end_layout

\end_inset

 can be caught and handled by a user routine by supplying a pointer to that
 routine in the 
\family typewriter
sigaction
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigaction
\end_layout

\end_inset


\family default
 call.
 The first time the signal is received, this routine will be called to process
 that signal.
 When the routine, commonly called a 
\shape italic
signal handler
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape italic
signal handler
\end_layout

\end_inset


\shape default
, is executed, it will be passed a single integer argument indicating which
 signal was received.
 This integer can be compared against the constants in 
\family typewriter
<signal.h>
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
<signal.h>
\end_layout

\end_inset


\family default
, enabling the programmer to write general-purpose signal handlers.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:ouch1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a small program that catches the interrupt signal and prints the
 string 
\begin_inset Quotes eld
\end_inset

OUCH
\begin_inset Quotes erd
\end_inset

 when it is received:
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:ouch1"

\end_inset

ouch1 - prints "OUCH" when an interrupt is received.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c-mode; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* ouch1.c file.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <fcntl.h>
\end_layout

\begin_layout Plain Layout

#include <errno.h>
\end_layout

\begin_layout Plain Layout

#include <signal.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* ouch1 program.
 */
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

void handler(int);
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

/* Global variables.
 */
\end_layout

\begin_layout Plain Layout

struct sigaction sa = {
\end_layout

\begin_layout Plain Layout

	handler,
\end_layout

\begin_layout Plain Layout

	SIGINT,
\end_layout

\begin_layout Plain Layout

	SA_SIGINFO
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Setup signal handler for this process.
 */
\end_layout

\begin_layout Plain Layout

	if(sigaction(SIGINT, &sa, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

		ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

		FOREVER
\end_layout

\begin_layout Plain Layout

			pause();
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		perror("Could not setup SIGINT");
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void handler(int si)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	/* Handler code */
\end_layout

\begin_layout Plain Layout

	printf("OUCH
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of ouch1.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
This program differs from the sigaction.c one since the signal 
\family typewriter
SIGINT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGINT
\end_layout

\end_inset


\family default
 has got the 
\family typewriter
SA_RESETHAND
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SA_RESETHAND
\end_layout

\end_inset


\family default
 flag set.
 This will reset the 
\family typewriter
SIGINT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGINT
\end_layout

\end_inset


\family default
 flag to default behaviour for the specified process after the signal is
 captured for the first time.
 The second time the signal is sent to the process again, the process will
 be interrupted.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:using-signals-for-timeouts"

\end_inset

Using Signals for Timeouts.
\end_layout

\begin_layout Standard
By using the 
\family typewriter
alarm
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
alarm
\end_layout

\end_inset


\family default
 system call
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
system call
\end_layout

\end_inset

, a program can generate timeouts while performing various functions.
 For example, a program that wishes to read from a terminal, but give up
 after 30 seconds and take a default action, would issue an alarm request
 for 30 seconds immediately before starting the read.
 When 30 seconds elapsed, a 
\family typewriter
SIGALARM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SIGALARM
\end_layout

\end_inset


\family default
 signal would be sent to the process.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:alarm"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a program using 
\family typewriter
alarm
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
alarm
\end_layout

\end_inset


\family default
 system call
\begin_inset Index idx
status open

\begin_layout Plain Layout
system call
\end_layout

\end_inset

 to produce a timeout.
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:alarm"

\end_inset

alarm - perform alarm issuing for the executing process.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c-mode; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* alarm.c file.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <fcntl.h>
\end_layout

\begin_layout Plain Layout

#include <errno.h>
\end_layout

\begin_layout Plain Layout

#include <signal.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* alarm program.
 */
\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

void handler(int);
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Global variables.
 */
\end_layout

\begin_layout Plain Layout

struct sigaction sa = {
\end_layout

\begin_layout Plain Layout

	handler,
\end_layout

\begin_layout Plain Layout

	SIGALRM,
\end_layout

\begin_layout Plain Layout

	SA_SIGINFO
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* The main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* setup signal handler for this process.
 */
\end_layout

\begin_layout Plain Layout

	if(sigaction(SIGALRM, &sa, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

		alarm(15);
\end_layout

\begin_layout Plain Layout

		ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

		FOREVER {
\end_layout

\begin_layout Plain Layout

			printf("Waiting!
\backslash
n");
\end_layout

\begin_layout Plain Layout

			sleep(5);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		perror("Could not setup SIGINT");
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void handler(int si)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	/* Handler code.
 */
\end_layout

\begin_layout Plain Layout

	if(si == SIGALRM)
\end_layout

\begin_layout Plain Layout

		printf("Alarm received.
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of alarm.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The setjmp and longjmp Routines.
\end_layout

\begin_layout Standard
The 
\family typewriter
setjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
setjmp
\end_layout

\end_inset


\family default
 function save its calling environment in its argument and it returns 0.
 The corresponding 
\family typewriter
longjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
longjmp
\end_layout

\end_inset


\family default
 function restore the environment saved by the most recent invocation of
 the respective 
\family typewriter
setjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
setjmp
\end_layout

\end_inset


\family default
 function.
 They then return so that program execution continues as if the corresponding
 invocation of the 
\family typewriter
setjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
setjmp
\end_layout

\end_inset


\family default
 call had just returned the value specified by its second argument, instead
 of 0.
 The value specified by the second argument must be non-zero; a 0 value
 is treated as 1 to allow the programmer to differentiate between a direct
 invocation of 
\family typewriter
setjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
setjmp
\end_layout

\end_inset


\family default
 and a return via 
\family typewriter
longjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
longjmp
\end_layout

\end_inset


\family default
.
 The 
\family typewriter
longjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
longjmp
\end_layout

\end_inset


\family default
 routine may not be called after the routine which called the 
\family typewriter
setjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
setjmp
\end_layout

\end_inset


\family default
 routines returns.
 All accessible objects have values as of the time the 
\family typewriter
longjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
longjmp
\end_layout

\end_inset


\family default
 routine was called, except that the values of objects of automatic storage
 invocation duration that do not have the volatile type and have been changed
 between the 
\family typewriter
setjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
setjmp
\end_layout

\end_inset


\family default
 invocation and 
\family typewriter
longjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
longjmp
\end_layout

\end_inset


\family default
 call are indeterminate.
 The 
\family typewriter
setjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
setjmp
\end_layout

\end_inset


\family default
/
\family typewriter
longjmp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
longjmp
\end_layout

\end_inset


\family default
 function pairs save and restore the signal mask.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:timeout"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a program using the setjmp/longjmp and alarm system call to produce
 a timeout.
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:timeout"

\end_inset

timeout - program to demonstrate a timeout routine.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c-mode; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* timeout.c file.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <fcntl.h>
\end_layout

\begin_layout Plain Layout

#include <errno.h>
\end_layout

\begin_layout Plain Layout

#include <signal.h>
\end_layout

\begin_layout Plain Layout

#include <setjmp.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* timeout.c program.
 */
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

void timeout(int);
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Global variables.
 */
\end_layout

\begin_layout Plain Layout

struct sigaction sa = {
\end_layout

\begin_layout Plain Layout

	timeout,
\end_layout

\begin_layout Plain Layout

	SIGALRM,
\end_layout

\begin_layout Plain Layout

	SA_SIGINFO | SA_RESETHAND
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

jmp_buf env;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char buff[ BUFSIZ ];
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Setup signal handler for this process.
 */
\end_layout

\begin_layout Plain Layout

	if(sigaction(SIGALRM, &sa, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * The code inside the if gets executed the first
\end_layout

\begin_layout Plain Layout

		 * time through setjmp, the code inside the else
\end_layout

\begin_layout Plain Layout

		 * the second time.
\end_layout

\begin_layout Plain Layout

		*/
\end_layout

\begin_layout Plain Layout

		if(setjmp(env) == 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * Issue a request for an alarm to be
\end_layout

\begin_layout Plain Layout

			 * delivered in 15 seconds.
\end_layout

\begin_layout Plain Layout

			 */
\end_layout

\begin_layout Plain Layout

			alarm(15);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/* Prompt for input.
 */
\end_layout

\begin_layout Plain Layout

			printf("Type a word: if you don't in 15 seconds I'll use 
\backslash
"WORD
\backslash
": ");
\end_layout

\begin_layout Plain Layout

			fgets(buff, BUFSIZ, stdin);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/* Turns off the alarm.
 */
\end_layout

\begin_layout Plain Layout

			alarm(0);
\end_layout

\begin_layout Plain Layout

			ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

		} else {
\end_layout

\begin_layout Plain Layout

			strncpy(buff, "WORD", BUFSIZ);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nThe word is %s
\backslash
n", buff);
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		perror("Could not setup SIGINT");
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * timeout -- timeout function, executed when the alarm
\end_layout

\begin_layout Plain Layout

 *            is issued.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

void timeout(int sig)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	/*
\end_layout

\begin_layout Plain Layout

	 * Ignore the signal for the duration of this
\end_layout

\begin_layout Plain Layout

	 * routine.
\end_layout

\begin_layout Plain Layout

	 */
\end_layout

\begin_layout Plain Layout

	if(sig == SIGALRM) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* Restore the action of the alarm signal.
 */
\end_layout

\begin_layout Plain Layout

		if(sigaction(SIGALRM, &sa, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * We would perform any timeout-related
\end_layout

\begin_layout Plain Layout

			 * functions here; in this case there
\end_layout

\begin_layout Plain Layout

			 * are none.
\end_layout

\begin_layout Plain Layout

			*/
\end_layout

\begin_layout Plain Layout

			;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * Return to the main routine at setjmp
\end_layout

\begin_layout Plain Layout

			 * and make setjmp return 1.
\end_layout

\begin_layout Plain Layout

			 */
\end_layout

\begin_layout Plain Layout

			;
\end_layout

\begin_layout Plain Layout

			longjmp(env, 1);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of timeout.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:the-openbsd-signal-mechanism"

\end_inset

The OpenBSD Signal Mechanism.
\end_layout

\begin_layout Subsection
The Signal Mask.
\end_layout

\begin_layout Standard
A user-defined signal handler is called with the signal mechanism provided
 by OpenBSD
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 where signals are manipulated using 
\family typewriter
sigaddset
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigaddset
\end_layout

\end_inset

, 
\family typewriter
sigdelset
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigdelset
\end_layout

\end_inset

, 
\family typewriter
sigemptyset
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigemptyset
\end_layout

\end_inset

, 
\family typewriter
sigfillset
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigfillset
\end_layout

\end_inset

, 
\family typewriter
sigismember
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigismember
\end_layout

\end_inset

, 
\family typewriter
sigpending
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigpending
\end_layout

\end_inset

, 
\family typewriter
sigprocmask
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigprocmask
\end_layout

\end_inset


\family default
 and 
\family typewriter
sigsuspend
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigsuspend
\end_layout

\end_inset


\family default
 system calls.
 These functions manipulate signal sets stored in a 
\family typewriter
sigset_t
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigset_t
\end_layout

\end_inset


\family default
 object.
 Either 
\family typewriter
sigemptyset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigemptyset
\end_layout

\end_inset


\family default
 or 
\family typewriter
sigfillset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigfillset
\end_layout

\end_inset


\family default
 must be called for every object of type 
\family typewriter
sigset_t
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigset_t
\end_layout

\end_inset


\family default
 before any other use of the object.
 
\family typewriter
sigemptyset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigemptyset
\end_layout

\end_inset


\family default
 and 
\family typewriter
sigfillset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigfillset
\end_layout

\end_inset


\family default
 are provided as macros, but actual functions are available if their names
 are undefined, with
\family typewriter
 #undef
\family default
 name.
 
\end_layout

\begin_layout Itemize

\family typewriter
sigemptyset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigemptyset
\end_layout

\end_inset


\family default
 function initializes a signal set to be empty;
\end_layout

\begin_layout Itemize

\family typewriter
sigfillset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigfillset
\end_layout

\end_inset


\family default
 initializes a signal set to contain all signals;
\end_layout

\begin_layout Itemize

\family typewriter
sigaddset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigaddset
\end_layout

\end_inset


\family default
 adds the specified signal as argument to the signal set;
\end_layout

\begin_layout Itemize

\family typewriter
sigdelset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigdelset
\end_layout

\end_inset


\family default
 deletes the specified signal as argument from the signal set;
\end_layout

\begin_layout Itemize

\family typewriter
sigismember
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigismember
\end_layout

\end_inset


\family default
 returns whether a specified signal as argument is contained in the signal
 set.
\end_layout

\begin_layout Standard
\noindent
The 
\family typewriter
sigismember
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
sigismember
\end_layout

\end_inset


\family default
 function returns 1 if the signal is a member of the set and 0 otherwise.
 The other functions return 0 upon success.
 A -1 return value indicates an error occurred and the global variable 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 is set to indicate the reason.
 The 
\family typewriter
sigprocmask
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigprocmask
\end_layout

\end_inset


\family default
 function examines and/or changes the current signal mask, those signals
 that are blocked from delivery.
 Signals are blocked if they are members of the current signal mask set.
 If the second argument is not 
\family typewriter
NULL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
NULL
\end_layout

\end_inset


\family default
, the action of 
\family typewriter
sigprocmask
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigprocmask
\end_layout

\end_inset


\family default
 depends on the value of the parameter specified as first argument, which
 can be one of the following values:
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
SIG_BLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIG_BLOCK
\end_layout

\end_inset


\family default
 The new mask is the union of the current mask and the specified set.
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
SIG_UNBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIG_UNBLOCK
\end_layout

\end_inset


\family default
 The new mask is the intersection of the current mask and the complement
 of the specified set.
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
SIG_SETMASK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIG_SETMASK
\end_layout

\end_inset


\family default
 The current mask is replaced by the specified set.
\end_layout

\begin_layout Standard
\noindent
If the third argument is not 
\family typewriter
NULL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
NULL
\end_layout

\end_inset


\family default
, it is set to the previous value of the signal mask
\begin_inset Index idx
status open

\begin_layout Plain Layout
signal mask
\end_layout

\end_inset

.
 When the second argument is 
\family typewriter
NULL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
NULL
\end_layout

\end_inset


\family default
, the value of the first argument is insignificant and the mask remains
 unchanged, providing a way to examine the signal mask without modification.
 The system quietly disallows 
\family typewriter
SIGKILL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGKILL
\end_layout

\end_inset


\family default
 or 
\family typewriter
SIGSTOP
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGSTOP
\end_layout

\end_inset


\family default
 to be blocked.
 Only signals which are in the pending state will be blocked.
 Signals that are explicitly ignored or for which no handler has been installed
 and where the default action is to discard the signal are not held as pending
 and will be discarded regardless of the signal mask.
 Blocked signals remain in the pending state until another call to sigprocmask
 removes the pending signal(s) from the mask.
 If there are unblocked signals that are pending after the signal mask is
 updated, at least one will be delivered before 
\family typewriter
sigprocmask
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigprocmask
\end_layout

\end_inset


\family default
 returns.
 Upon successful completion, the value 0 is returned; otherwise the value -1
 is returned and the global variable errno is set to indicate the error.

\family typewriter
 sigsuspend
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigsuspend
\end_layout

\end_inset


\family default
 temporarily changes the blocked signal mask to the set pointed by the first
 argument and then waits for a signal to arrive; on return the previous
 set of masked signals is restored.
 The signal mask set is usually empty to indicate that all signals are to
 be unblocked for the duration of the call.
 In normal usage, a signal is blocked using 
\shape italic
sigprocmask
\shape default
(2) to begin a critical section, variables modified on the occurrence of
 the signal are examined to determine that there is no work to be done,
 and the process pauses awaiting work by using 
\family typewriter
sigsuspend
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigsuspend
\end_layout

\end_inset


\family default
 with the previous mask returned by 
\shape italic
sigprocmask
\shape default
(2).
 The sigsuspend function always terminates by being interrupted, returning
 -1 with 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to 
\family typewriter
EINTR
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EINTR
\end_layout

\end_inset


\family default
.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:sigblock"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a program which blocks all signals but 
\family typewriter
SIGUSR1
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGUSR1
\end_layout

\end_inset


\family default
.
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:sigblock"

\end_inset

sigblock - program to demonstrate the blocking of signal(s).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c-mode; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* sigblock.c file.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <fcntl.h>
\end_layout

\begin_layout Plain Layout

#include <errno.h>
\end_layout

\begin_layout Plain Layout

#include <signal.h>
\end_layout

\begin_layout Plain Layout

#include <setjmp.h>
\end_layout

\begin_layout Plain Layout

#include <sys/signal.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* sigblock program.
 */
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

void handler(int, siginfo_t *, void *);
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Global variables.
 */
\end_layout

\begin_layout Plain Layout

struct sigaction signals;
\end_layout

\begin_layout Plain Layout

jmp_buf env;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Setup signal set for this process.
 */
\end_layout

\begin_layout Plain Layout

	signals.sa_sigaction = handler;
\end_layout

\begin_layout Plain Layout

	if(sigfillset(&signals.sa_mask) >= 0) {
\end_layout

\begin_layout Plain Layout

		if(sigdelset(&signals.sa_mask, SIGUSR1) >= 0) {
\end_layout

\begin_layout Plain Layout

			printf("Current signal mask set: 0x%8x
\backslash
n", signals.sa_mask);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * Blocking all signals but SIGUSR1.
\end_layout

\begin_layout Plain Layout

			 * Use # `kill -s SIGUSR1 pid` to terminate the
\end_layout

\begin_layout Plain Layout

			 * process.
\end_layout

\begin_layout Plain Layout

			 */
\end_layout

\begin_layout Plain Layout

			if(sigprocmask(SIG_BLOCK, &signals.sa_mask, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

				if(setjmp(env) == 0) {
\end_layout

\begin_layout Plain Layout

					FOREVER {
\end_layout

\begin_layout Plain Layout

						;
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

				} else
\end_layout

\begin_layout Plain Layout

					ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * handler - the handler function execute when the configured
\end_layout

\begin_layout Plain Layout

 *           signal is issued.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

void handler(int sig, siginfo_t *mask, void *d)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	longjmp(env, 1);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of sigblock.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Signal Stack.
\end_layout

\begin_layout Standard
It is possible for a program to specify an alternate stack on which signals
 should be processed.
 This may be necessary if receipt of the signal can occur when the process
 stack is invalid.
 For example, if a process runs out of stack space, it must be terminated:
 since there is no stack space available, the stack cannot be extended to
 catch the signal.
 Using the alternate signal stack, the process can take the signal on this
 stack, issue the appropriate requests to increse the stack size limit and
 then return to normal operation on the regular stack.
 The 
\shape italic
alternate signal stack
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
alternate signal stack
\end_layout

\end_inset


\shape default
 is defined in 
\family typewriter
<sys/signals.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/signals.h>
\end_layout

\end_inset


\family default
 as follows:
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:sigaltstack-struct"

\end_inset

The sigaltstack structure.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

typedef struct sigaltstack {
\end_layout

\begin_layout Plain Layout

  void *ss_sp;
\end_layout

\begin_layout Plain Layout

  size_t ss_size;
\end_layout

\begin_layout Plain Layout

  int ss_flags;
\end_layout

\begin_layout Plain Layout

} stack_t;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent

\family typewriter
sigaltstack
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigaltstack
\end_layout

\end_inset


\family default
 allows users to define an alternate stack on which signals delivered to
 this thread are to be processed.
 If the first argument is non-zero and 
\family typewriter
SS_DISABLE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SS_DISABLE
\end_layout

\end_inset


\family default
 is set in 
\family typewriter
ss_flags
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ss_flags
\end_layout

\end_inset


\family default
 structure member, the signal stack will be disabled.
 A disabled stack will cause all signals to be taken on the regular user
 stack.
 Trying to disable an active stack will cause 
\family typewriter
sigaltstack
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigaltstack
\end_layout

\end_inset


\family default
 to return -1 with 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to 
\family typewriter
EPERM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EPERM
\end_layout

\end_inset


\family default
.
 Otherwise, the 
\family typewriter
ss_sp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ss_sp
\end_layout

\end_inset


\family default
 structure member specifies a pointer to a space to be used as the signal
 stack and structure member named 
\family typewriter
ss_size
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ss_size
\end_layout

\end_inset


\family default
 specifies the size of that space.
 When a signal's action indicates its handler should execute on the signal
 stack
\begin_inset Index idx
status open

\begin_layout Plain Layout
signal stack
\end_layout

\end_inset

, specified with a 
\shape italic
sigaction
\shape default
(2) system call, the system checks to see if the thread is currently executing
 on that stack.
 If the thread is not currently executing on the signal stack
\begin_inset Index idx
status open

\begin_layout Plain Layout
signal stack
\end_layout

\end_inset

, the system arranges a switch to the signal stack for the duration of the
 signal handler's execution.
 If the third argument is non-zero, the current signal stack
\begin_inset Index idx
status open

\begin_layout Plain Layout
signal stack
\end_layout

\end_inset

 state is returned in the memory pointed by this argument.
 The 
\family typewriter
ss_flags
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ss_flags
\end_layout

\end_inset


\family default
 field will contain the value 
\family typewriter
SS_ONSTACK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SS_ONSTACK
\end_layout

\end_inset


\family default
 if the thread is currently on a signal stack and 
\family typewriter
SS_DISABLE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SS_DISABLE
\end_layout

\end_inset


\family default
 if the signal stack
\begin_inset Index idx
status open

\begin_layout Plain Layout
signal stack
\end_layout

\end_inset

 is currently disabled.
 The value 
\family typewriter
SIGSTKSZ
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGSTKSZ
\end_layout

\end_inset


\family default
 is defined to be the number of bytes/chars that would be used to cover
 the usual case when allocating an alternate stack area.
 The following code fragment is typically used to allocate an alternate
 stack:
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

if((sigstk.ss_sp = malloc(SIGSTKSZ)) == NULL)
\end_layout

\begin_layout Plain Layout

	/* error return */
\end_layout

\begin_layout Plain Layout

sigstk.ss_size = SIGSTKSZ;
\end_layout

\begin_layout Plain Layout

sigstk.ss_flags = 0;
\end_layout

\begin_layout Plain Layout

if(sigaltstack(&sigstk, NULL) == -1)
\end_layout

\begin_layout Plain Layout

	perror("sigaltstack");
\end_layout

\end_inset

An alternative approach is provided for programs with signal handlers that
 require a specific amount of stack space other than the default size.
 The value 
\family typewriter
MINSIGSTKSZ
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MINSIGSTKSZ
\end_layout

\end_inset


\family default
 is defined to be the number of bytes/chars that is required by the operating
 system to implement the alternate stack
\begin_inset Index idx
status open

\begin_layout Plain Layout
alternate stack
\end_layout

\end_inset

 feature.
 In computing an alternate stack size, programs should add 
\family typewriter
MINSIGSTKSZ
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MINSIGSTKSZ
\end_layout

\end_inset


\family default
 to their stack requirements to allow for the operating system overhead.
 Signal stacks are automatically adjusted for the direction of stack growth
 and alignment requirements.
 Signal stacks may or may not be protected by the hardware and are not “grown”
 automatically as is done for the normal stack.
 If the stack overflows and this space is not protected, unpredictable results
 may occur.
 On OpenBSD
\begin_inset Index idx
status open

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 some additional restrictions prevent dangerous address space modifications.
 The proposed space at 
\family typewriter
ss_sp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ss_sp
\end_layout

\end_inset


\family default
 is verified to be contiguously mapped for read-write permissions, no execute
 and incapable of syscall entry
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\shape italic
msyscall
\shape default
(2).
\end_layout

\end_inset

.
 If those conditions are met, a page-aligned
\begin_inset Index idx
status open

\begin_layout Plain Layout
page-aligned
\end_layout

\end_inset

 inner region will be freshly mapped, all zero, with 
\family typewriter
MAP_STACK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MAP_STACK
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\shape italic
mmap
\shape default
(2).
\end_layout

\end_inset


\family default
, destroying the pre-existing data in the region.
 Once the 
\family typewriter
sigaltstack
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigaltstack
\end_layout

\end_inset


\family default
 is disabled, the 
\family typewriter
MAP_STACK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MAP_STACK
\end_layout

\end_inset


\family default
 attribute remains on the memory, so it is best to deallocate the memory
 via a method that results in 
\shape italic
munmap
\shape default
(2).
 Upon successful completion, the value 0 is returned; otherwise the value -1
 is returned and the global variable 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 is set to indicate the error.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:sigstack"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a program using the alternate stack feature.
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:sigstack"

\end_inset

sigstack - program to demonstrate the signal stack features.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c-mode; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* sigstack.c file.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <fcntl.h>
\end_layout

\begin_layout Plain Layout

#include <errno.h>
\end_layout

\begin_layout Plain Layout

#include <signal.h>
\end_layout

\begin_layout Plain Layout

#include <setjmp.h>
\end_layout

\begin_layout Plain Layout

#include <sys/resource.h>
\end_layout

\begin_layout Plain Layout

#include <sys/signal.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* sigstack program.
 */
\end_layout

\begin_layout Plain Layout

#define STACKSIZE 10240
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

void fn(void);
\end_layout

\begin_layout Plain Layout

void handler(int, siginfo_t *, void *);
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Global variables.
 */
\end_layout

\begin_layout Plain Layout

char *stack;                    /* pointer to signal stack base.
 */
\end_layout

\begin_layout Plain Layout

int tooksig = 0;                /* 1 after we take the signal.
 */
\end_layout

\begin_layout Plain Layout

jmp_buf env;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

	struct sigaction signals;
\end_layout

\begin_layout Plain Layout

	struct sigaltstack ss;
\end_layout

\begin_layout Plain Layout

	struct rlimit limits;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Set stack size limit to 50 kBytes.
 */
\end_layout

\begin_layout Plain Layout

	if(getrlimit(RLIMIT_STACK, &limits) >= 0) {
\end_layout

\begin_layout Plain Layout

		if(limits.rlim_cur > (50 * STACKSIZE)) {
\end_layout

\begin_layout Plain Layout

			limits.rlim_cur = 50 * STACKSIZE;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(setrlimit(RLIMIT_STACK, &limits) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * Take illegal instruction and process it with handler,
\end_layout

\begin_layout Plain Layout

			 * on the interrupt stack.
\end_layout

\begin_layout Plain Layout

			 */
\end_layout

\begin_layout Plain Layout

			signals.sa_mask = 0;
\end_layout

\begin_layout Plain Layout

			signals.sa_sigaction = handler;
\end_layout

\begin_layout Plain Layout

			signals.sa_flags = SA_ONSTACK;
\end_layout

\begin_layout Plain Layout

			if(sigaction(SIGILL, &signals, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

				/*
\end_layout

\begin_layout Plain Layout

				 * Allocate memory for the signal stack.
  The
\end_layout

\begin_layout Plain Layout

				 * kernel assumes the addresses grow in the same
\end_layout

\begin_layout Plain Layout

				 * direction as the process stack.
\end_layout

\begin_layout Plain Layout

				 */
\end_layout

\begin_layout Plain Layout

				if((stack = (char *) malloc(sizeof(char *) * STACKSIZE)) != NULL) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

					/*
\end_layout

\begin_layout Plain Layout

					 * Issue the call to tell the system about the
\end_layout

\begin_layout Plain Layout

					 * signal stack.
  We pass the end of the signal
\end_layout

\begin_layout Plain Layout

					 * stack, no the beginning, since the stack
\end_layout

\begin_layout Plain Layout

					 * grows toward higher addresses.
\end_layout

\begin_layout Plain Layout

					 */
\end_layout

\begin_layout Plain Layout

					ss.ss_size = STACKSIZE;
\end_layout

\begin_layout Plain Layout

					ss.ss_sp = (void *) stack;
\end_layout

\begin_layout Plain Layout

					if(sigaltstack(&ss, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

						/* Start using the stack.
 */
\end_layout

\begin_layout Plain Layout

						ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

						fn();
\end_layout

\begin_layout Plain Layout

					} else {
\end_layout

\begin_layout Plain Layout

						fprintf(stderr, "Cannot configure alternate signal stack.
\backslash
n");
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

				} else {
\end_layout

\begin_layout Plain Layout

					fprintf(stderr, "Out of memory!
\backslash
n");
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			} else {
\end_layout

\begin_layout Plain Layout

				fprintf(stderr, "Cannot configure SIGILL signal handling.
\backslash
n");
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} else {
\end_layout

\begin_layout Plain Layout

			fprintf(stderr, "Could not set process current stack limit.
\backslash
n");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		fprintf(stderr, "Could not get process current stack limit.
\backslash
n");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * handler - the handler function called when the signal
\end_layout

\begin_layout Plain Layout

 *           is issued.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

void handler(int sig, siginfo_t *mask, void *d)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	struct rlimit limits;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Increase the stack limit to the maximum.
 */
\end_layout

\begin_layout Plain Layout

	if(getrlimit(RLIMIT_STACK, &limits) >= 0) {
\end_layout

\begin_layout Plain Layout

		limits.rlim_cur = limits.rlim_max;
\end_layout

\begin_layout Plain Layout

		if(setrlimit(RLIMIT_STACK, &limits) >= 0) {
\end_layout

\begin_layout Plain Layout

			tooksig = 1;
\end_layout

\begin_layout Plain Layout

			return;
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			fprintf(stderr, "Could not set current stack limit.
\backslash
n");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		fprintf(stderr, "Could not get current stack limit.
\backslash
n");
\end_layout

\begin_layout Plain Layout

	exit(EXIT_FAILURE);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * fn - a generic recursive test function.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

void fn(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	/* Take up 5 kBytes of space on stack.
 */
\end_layout

\begin_layout Plain Layout

	printf("%s
\backslash
n", tooksig ? "Now on extended stack." : "On 50 kBytes stack.");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Recurse.
 */
\end_layout

\begin_layout Plain Layout

	fn();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of sigstack.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Signals play an important role in OpenBSD programming and it is important
 to understand them.
 This chapter has discussed several of the techniques and pitfalls associated
 with signal processing: Chapter 10, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "chap:job-control"
plural "false"
caps "false"
noprefix "false"

\end_inset

, discuss several more signals associated with OpenBSD
\begin_inset Index idx
status open

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 
\shape italic
job control
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
job control
\end_layout

\end_inset


\shape default
.
\end_layout

\end_body
\end_document
