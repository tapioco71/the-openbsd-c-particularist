#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass memoir
\use_default_options true
\master the-openbsd-c-particularist.lyx
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.7cm
\topmargin 1cm
\rightmargin 1.5cm
\bottommargin 1.2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:interprocess-communication"

\end_inset

Interprocess Communication.
\end_layout

\begin_layout Standard
\align right
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:sockets"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:message-queues"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:semaphores"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:shared-memory"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The 
\shape italic
interprocess communication
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
interprocess communication
\end_layout

\end_inset


\shape default
, ipc
\begin_inset Index idx
status open

\begin_layout Plain Layout
ipc
\end_layout

\end_inset

, facilities of OpenBSD
\begin_inset Index idx
status open

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 system allow two or more distinct processes to communicate with each other.
 We have already discussed one form of ipc, the pipe
\begin_inset Index idx
status open

\begin_layout Plain Layout
pipe
\end_layout

\end_inset

.
 This mechanism allows two related processes, one of which must be a descendant
 of the other, to communicate over a two-way byte stream using the read
 and write system calls.
 OpenBSD
\begin_inset Index idx
status open

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 provide more powerful ipc
\begin_inset Index idx
status open

\begin_layout Plain Layout
ipc
\end_layout

\end_inset

 facilities that allow two or more completely unrelated process to communicate
 with each other: semaphores
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

, shared memory
\begin_inset Index idx
status open

\begin_layout Plain Layout
shared memory
\end_layout

\end_inset

, messages queues
\begin_inset Index idx
status open

\begin_layout Plain Layout
messages queue
\end_layout

\end_inset

 and sockets
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

.
 Each of these mechanism, while powerful in its own area, tends to be rather
 restrictive in the types of uses to which it can be put.
 In OpenBSD
\begin_inset Index idx
status open

\begin_layout Plain Layout
OpenBSD
\end_layout

\end_inset

 the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 is a generalization of the pipe
\begin_inset Index idx
status open

\begin_layout Plain Layout
pipe
\end_layout

\end_inset

 mechanism for which is, in fact, implemented as a pair of connected sockets.
 The socket are described in the book 
\begin_inset CommandInset citation
LatexCommand cite
key "Stevens:2007_1"
literal "false"

\end_inset

 and the ipc in the book 
\begin_inset CommandInset citation
LatexCommand cite
key "Stevens:2007_2"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:sockets"

\end_inset

Sockets.
\end_layout

\begin_layout Standard
Interprocess communication beyond the scope of the pipe
\begin_inset Index idx
status open

\begin_layout Plain Layout
pipe
\end_layout

\end_inset

 mechanism can normally be described using 
\shape italic
client/server
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
client/server
\end_layout

\end_inset


\shape default
 model.
 In this model, one process is called the 
\shape italic
server
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
server
\end_layout

\end_inset


\shape default
; it is responsible for satisfying requests put to it by the other process,
 the 
\shape italic
client
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
client
\end_layout

\end_inset


\shape default
.
 As an example, consider a program tha manages all the printer queues on
 a machine.
 This program would be called a server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

.
 When a user prints a file, the printing program, the client
\begin_inset Index idx
status open

\begin_layout Plain Layout
client
\end_layout

\end_inset

, contacts the server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

 and asks it to put the file into the queue for the specified printer.
 The server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

 does this and then invokes the appropriate program to actually print the
 file on the printer.
 Normally, when a server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

 program is invoked, it asks the operating system
\begin_inset Index idx
status open

\begin_layout Plain Layout
operating system
\end_layout

\end_inset

 for a socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

.
 When it gets one, it assigns a well-known name to that socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

, so that other programs can ask the operating system
\begin_inset Index idx
status open

\begin_layout Plain Layout
operating system
\end_layout

\end_inset

 to talk to that name, since they will not known the integer value of the
 socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 itself.
 After naming the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

, the server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

 listens on the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 for connection requests from client
\begin_inset Index idx
status open

\begin_layout Plain Layout
client
\end_layout

\end_inset

 processes to come in.
 When a connection request arrives, the server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

 may accept or reject the connection.
 If it accepts the connection, the operating system
\begin_inset Index idx
status open

\begin_layout Plain Layout
operating system
\end_layout

\end_inset

 joins the client
\begin_inset Index idx
status open

\begin_layout Plain Layout
client
\end_layout

\end_inset

 and server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

 together at the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 and the server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

 may read and write data to and from the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 just as if it were a pipe
\begin_inset Index idx
status open

\begin_layout Plain Layout
pipe
\end_layout

\end_inset

 to the client
\begin_inset Index idx
status open

\begin_layout Plain Layout
client
\end_layout

\end_inset

.
 The client
\begin_inset Index idx
status open

\begin_layout Plain Layout
client
\end_layout

\end_inset

 begins the process by asking that the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 be connected to some other socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 having a given name.
 The operating system
\begin_inset Index idx
status open

\begin_layout Plain Layout
operating system
\end_layout

\end_inset

 attempts to find a socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 with the given name and if it does, sends the process listening to that
 socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 a connection request.
 If the server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

 accepts the connection, the operating system
\begin_inset Index idx
status open

\begin_layout Plain Layout
operating system
\end_layout

\end_inset

 joins the two processes together at the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 and the client
\begin_inset Index idx
status open

\begin_layout Plain Layout
client
\end_layout

\end_inset

 can read and write data to and from the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 just as if it were a pipe
\begin_inset Index idx
status open

\begin_layout Plain Layout
pipe
\end_layout

\end_inset

 to the server
\begin_inset Index idx
status open

\begin_layout Plain Layout
server
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
The 
\family typewriter
socket
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
socket
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard

\family typewriter
socket
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
socket
\end_layout

\end_inset


\family default
 creates an endpoint for communication and returns a descriptor.
 It takes three arguments: the first is an integer which is the domain,
 it specifies a communications domain within which communication will take
 place; this selects the protocol family which should be used.
 These families are defined in the include file 
\family typewriter
<sys/socket.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/socket.h>
\end_layout

\end_inset


\family default
.
 The currently understood formats are:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
AF_UNIX
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AF_UNIX
\end_layout

\end_inset


\family default
 UNIX internal protocols
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent

\family typewriter
AF_INET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AF_INET
\end_layout

\end_inset


\family default
 Internet Protocol version 4 (IPv4) protocol family
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
AF_INET6
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AF_INET6
\end_layout

\end_inset


\family default
 Internet Protocol version 6 (IPv6) protocol family
\end_layout

\begin_layout Standard
The second argument is the socket type, which specifies the semantics of
 communication.
 Currently defined types are:
\end_layout

\begin_layout Itemize

\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Itemize

\family typewriter
SOCK_DGRAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_DGRAM
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Itemize

\family typewriter
SOCK_RAW
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_RAW
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Itemize

\family typewriter
SOCK_SEQPACKET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_SEQPACKET
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Standard
A 
\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
 type provides sequenced, reliable, two-way connection based byte streams.
 An out-of-band data transmission mechanism may be supported.
 A 
\family typewriter
SOCK_DGRAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_DGRAM
\end_layout

\end_inset


\family default
 socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 supports 
\shape italic
datagrams
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
datagram
\end_layout

\end_inset


\shape default
, connectionless, unreliable messages of a fixed, typically small, maximum
 length.
 A 
\family typewriter
SOCK_SEQPACKET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_SEQPACKET
\end_layout

\end_inset


\family default
 socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 may provide a sequenced, reliable, two-way connection-based data transmission
 path for datagrams
\begin_inset Index idx
status open

\begin_layout Plain Layout
datagram
\end_layout

\end_inset

 of fixed maximum length; a consumer may be required to read an entire packet
 with each 
\family typewriter
read
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
read
\end_layout

\end_inset


\family default
 system call
\begin_inset Index idx
status open

\begin_layout Plain Layout
system call
\end_layout

\end_inset

.
 This facility is protocol specific, and presently implemented only for
 
\family typewriter
AF_UNIX
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AF_UNIX
\end_layout

\end_inset


\family default
.
 
\family typewriter
SOCK_RAW
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_RAW
\end_layout

\end_inset


\family default
 sockets provide access to internal network protocols and interfaces and
 are available only to the super-user
\begin_inset Index idx
status open

\begin_layout Plain Layout
super-user
\end_layout

\end_inset

.
 Any combination of the following flags may additionally be used in the
 type argument:
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000
\noindent

\family typewriter
SOCK_CLOEXEC
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_CLOEXEC
\end_layout

\end_inset


\family default
 Set close-on-exec flag on the new descriptor.
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
SOCK_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_NONBLOCK
\end_layout

\end_inset


\family default
 Set non-blocking I/O mode on the new socket.
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
SOCK_DNS
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_DNS
\end_layout

\end_inset


\family default
 For domains 
\family typewriter
AF_INET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AF_INET
\end_layout

\end_inset


\family default
 or 
\family typewriter
AF_INET6
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AF_INET6
\end_layout

\end_inset


\family default
, only allow 
\shape italic
connect
\shape default
(2), 
\shape italic
sendto
\shape default
(2) or 
\shape italic
sendmsg
\shape default
(2) to the DNS port, typically 53.
\end_layout

\begin_layout Standard
\noindent
The third argument is the protocol which specifies a particular protocol
 to be used with the socket.
 Normally only a single protocol exists to support a particular socket type
 within a given protocol family.
 However, it is possible that many protocols may exist, in which case a
 particular protocol must be specified in this manner.
 This argument specifies the protocol number to use and it is particular
 to the "communication domain" in which communication is to take place
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\shape italic
protocols
\shape default
(5).
\end_layout

\end_inset

.
 A value of 0 for this argument will let the system select an appropriate
 protocol for the requested socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 type.
 Sockets of type 
\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
 are full-duplex
\begin_inset Index idx
status open

\begin_layout Plain Layout
full-duplex
\end_layout

\end_inset

 byte streams.
 A 
\shape italic
stream socket
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
stream socket
\end_layout

\end_inset


\shape default
 must be in a connected state before any data may be sent or received on
 it.
 A connection to another socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 is created with a 
\shape italic
connect
\shape default
(2) call.
 Once connected, data may be transferred using 
\shape italic
read
\shape default
(2) and 
\shape italic
write
\shape default
(2) calls or some variant of the 
\shape italic
send
\shape default
(2) and 
\shape italic
recv
\shape default
(2) calls.
 When a session has been completed, a 
\shape italic
close
\shape default
(2) may be performed.
 Out-of-band data may also be transmitted as described in 
\shape italic
send
\shape default
(2) and received as described in 
\shape italic
recv
\shape default
(2).
 The communications protocols used to implement a 
\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
 ensure that data is not lost or duplicated.
 If a piece of data for which the peer protocol has buffer space cannot
 be successfully transmitted within a reasonable length of time, then the
 connection is considered broken and calls will indicate an error with -1
 returns and with 
\family typewriter
ETIMEDOUT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ETIMEDOUT
\end_layout

\end_inset


\family default
 as the specific code in the global variable 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
.
 The protocols optionally keep sockets "warm" by forcing transmissions roughly
 every minute in the absence of other activity.
 An error is then indicated if no response can be elicited on an otherwise
 idle connection for an extended period, e.g., 5 minutes.
 A 
\family typewriter
SIGPIPE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGPIPE
\end_layout

\end_inset


\family default
 signal is raised if a process sends on a broken stream
\begin_inset Index idx
status open

\begin_layout Plain Layout
stream
\end_layout

\end_inset

; this causes naive processes, which do not handle the signal, to exit.
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
SOCK_SEQPACKET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_SEQPACKET
\end_layout

\end_inset


\family default
 sockets employ the same system calls as 
\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
 sockets.
 The only difference is that read(2) calls will return only the amount of
 data requested, and any remaining in the arriving packet will be discarded.
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
SOCK_DGRAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_DGRAM
\end_layout

\end_inset


\family default
 and 
\family typewriter
SOCK_RAW
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_RAW
\end_layout

\end_inset


\family default
 sockets allow sending of datagrams to correspondents named in 
\shape italic
send
\shape default
(2) calls.
 Datagrams are generally received with 
\shape italic
recvfrom
\shape default
(2), which returns the next datagram with its return address.
\end_layout

\begin_layout Standard
An 
\shape italic
fcntl
\shape default
(2) call can be used to specify a process group to receive a 
\family typewriter
SIGURG
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGURG
\end_layout

\end_inset


\family default
 signal when the out-of-band data arrives.
 It may also enable non-blocking I/O and asynchronous notification of I/O
 events via 
\family typewriter
SIGIO
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGIO
\end_layout

\end_inset


\family default
.
 The operation of sockets is controlled by socket level options.
 These options are defined in the file 
\family typewriter
<sys/socket.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/socket.h>
\end_layout

\end_inset


\family default
.
 
\shape italic
setsockopt
\shape default
(2) and 
\shape italic
getsockopt
\shape default
(2) are used to set and get options, respectively.
 If successful, 
\family typewriter
socket
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
socket
\end_layout

\end_inset


\family default
 returns a non-negative integer, the 
\shape italic
socket file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
socket file descriptor
\end_layout

\end_inset


\shape default
.
 Otherwise, a value of -1 is returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 is set to indicate the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 and 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 System Calls.
\end_layout

\begin_layout Subsubsection*
The 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 system call.
\end_layout

\begin_layout Standard
\noindent
The 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 function shall initiate transmission of a message from the specified socket
 to its peer and it shall send a message only when the socket is connected.
 If the socket is a connectionless-mode socket, the message shall be sent
 to the pre-specified peer address.
 The 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 function takes four arguments: the first is the socket file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket file descriptor
\end_layout

\end_inset

.
 The second is the pointer to the buffer containing the message to send.
 The third specifies the length of the message in bytes and the last specifies
 the type of message transmission.
 Values of this argument are formed by logically OR'ing zero or more of
 the following flags:
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000
\noindent

\family typewriter
MSG_EOR
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_EOR
\end_layout

\end_inset


\family default
 terminates a record, if supported by the protocol;
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
MSG_OOB
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_OOB
\end_layout

\end_inset


\family default
 sends out-of-band data on sockets that support out-of-band communications.
 The significance and semantics of out-of-band data are protocol-specific;
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
MSG_NOSIGNAL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_NOSIGNAL
\end_layout

\end_inset


\family default
 Requests not to send the SIGPIPE signal if an attempt to send is made on
 a stream-oriented socket that is no longer connected.
 The 
\family typewriter
EPIPE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EPIPE
\end_layout

\end_inset


\family default
 error shall still be returned.
\end_layout

\begin_layout Standard
\noindent
The length of the message to be sent is specified by the third argument:
 if the message is too long to pass through the underlying protocol, 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 shall fail and no data shall be transmitted.
 Successful completion of a call to 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 does not guarantee delivery of the message.
 A return value of -1 indicates only locally-detected errors.
 If space is not available at the sending socket to hold the message to
 be transmitted, and the socket file descriptor does not have 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 set, send shall block until space is available.
 If space is not available at the sending socket to hold the message to
 be transmitted, and the socket file descriptor does have 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 set, send shall fail.
 The 
\family typewriter
select
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
select
\end_layout

\end_inset


\family default
 and 
\family typewriter
poll
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
poll
\end_layout

\end_inset


\family default
 functions can be used to determine when it is possible to send more data.
 The socket in use may require the process to have appropriate privileges
 to use the 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 function.
 Upon successful completion, 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 shall return the number of bytes sent.
 Otherwise, -1 shall be returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to indicate the error.
\end_layout

\begin_layout Subsubsection*
The 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 system call.
\end_layout

\begin_layout Standard
The 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 function shall receive a message from a connection-mode or connectionless-mode
 socket.
 It is normally used with connected sockets because it does not permit the
 application to retrieve the source address of received data.
 The 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 function takes the following arguments: the first argument is the socket
 which specifies the socket file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket file descriptor
\end_layout

\end_inset

.
 The second argument is the pointer to the buffer where the message should
 be stored.
 The third is the length which specifies the length in bytes of the buffer
 pointed to by the buffer argument.
 The fourth argument specifies the type of message reception.
 Values of this argument are formed by logically OR'ing zero or more of
 the following values:
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000
\noindent

\family typewriter
MSG_PEEK
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
MSG_PEEK
\end_layout

\end_inset


\family default
 peeks at an incoming message.
 The data is treated as unread and the next 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 or similar function shall still return this data;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
MSG_OOB
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
MSG_OOB
\end_layout

\end_inset


\family default
 requests out-of-band data.
 The significance and semantics of out-of-band data are protocol- specific;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
MSG_WAITALL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
MSG_WAITALL
\end_layout

\end_inset


\family default
 on 
\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
 sockets this requests that the function block until the full amount of
 data can be returned.
 The function may return the smaller amount of data if the socket is a message-b
ased socket, if a signal is caught, if the connection is terminated, if
 
\family typewriter
MSG_PEEK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_PEEK
\end_layout

\end_inset


\family default
 was specified, or if an error is pending for the socket.
\end_layout

\begin_layout Standard
The 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 function shall return the length of the message written to the buffer pointed
 to by the second argument.
 For message-based sockets, such as 
\family typewriter

\begin_inset Newline linebreak
\end_inset

SOCK_DGRAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_DGRAM
\end_layout

\end_inset


\family default
 and 
\family typewriter
SOCK_SEQPACKET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_SEQPACKET
\end_layout

\end_inset


\family default
, the entire message shall be read in a single operation.
 If a message is too long to fit in the supplied buffer, and 
\family typewriter
MSG_PEEK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_PEEK
\end_layout

\end_inset


\family default
 is not set in the flags argument, the excess bytes shall be discarded.
 For stream-based sockets, such as 
\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
, message boundaries shall be ignored.
 In this case, data shall be returned to the user as soon as it becomes
 available, and no data shall be discarded.
 If the 
\family typewriter
MSG_WAITALL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_WAITALL
\end_layout

\end_inset


\family default
 flag is not set, data shall be returned only up to the end of the first
 message.
 If no messages are available at the socket and 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 is not set on the socket's file descriptor, 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 shall block until a message arrives.
 If no messages are available at the socket and 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 is set on the socket's file descriptor, 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 shall fail and set errno
\begin_inset Index idx
status open

\begin_layout Plain Layout
errno
\end_layout

\end_inset

 to 
\family typewriter
EAGAIN
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EAGAIN
\end_layout

\end_inset


\family default
 or 
\family typewriter
EWOULDBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EWOULDBLOCK
\end_layout

\end_inset


\family default
.
 Upon successful completion, 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 shall return the length of the message in bytes.
 If no messages are available to be received and the peer has performed
 an orderly shutdown, 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 shall return 0.
 Otherwise, -1 shall be returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to indicate the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
listen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
listen
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
listen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
listen
\end_layout

\end_inset


\family default
 function shall mark a connection-mode socket, specified by the first argument,
 as accepting connections.
 The second argument provides a hint which the implementation shall use
 to limit the number of outstanding connections in the socket's listen queue.
 Implementations may impose a limit on backlog and silently reduce the specified
 value.
 Normally, a larger backlog argument value shall result in a larger or equal
 length of the 
\shape italic
listen queue
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
listen queue
\end_layout

\end_inset


\shape default
.
 Implementations shall support values of backlog up to 
\family typewriter
SOMAXCONN
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOMAXCONN
\end_layout

\end_inset


\family default
, defined in 
\family typewriter
<sys/socket.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/socket.h>
\end_layout

\end_inset


\family default
.
 The implementation may include incomplete connections in its listen queue
\begin_inset Index idx
status open

\begin_layout Plain Layout
listen queue
\end_layout

\end_inset

.
 The limits on the number of incomplete connections and completed connections
 queued may be different.
 The implementation may have an upper limit on the length of the listen
 queue – either global or per accepting socket.
 If the second argument exceeds this limit, the length of the listen queue
\begin_inset Index idx
status open

\begin_layout Plain Layout
listen queue
\end_layout

\end_inset

 is set to the limit.
 If 
\family typewriter
listen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
listen
\end_layout

\end_inset


\family default
 is called with the second argument value that is less than 0, the function
 behaves as if it had been called with an argument value of 0.
 The third argument equal to 0 may allow the socket to accept connections,
 in which case the length of the listen queue
\begin_inset Index idx
status open

\begin_layout Plain Layout
listen queue
\end_layout

\end_inset

 may be set to an implementation-defined minimum value.
 The socket in use may require the process to have appropriate privileges
 to use the 
\family typewriter
listen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
listen
\end_layout

\end_inset


\family default
 function.
 Upon successful completions, 
\family typewriter
listen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
listen
\end_layout

\end_inset


\family default
 shall return 0; otherwise, -1 shall be returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to indicate the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
shutdown
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shutdown
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
shutdown
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shutdown
\end_layout

\end_inset


\family default
 function shall cause all or part of a full-duplex connection
\begin_inset Index idx
status open

\begin_layout Plain Layout
full-duplex connection
\end_layout

\end_inset

 on the socket associated with the file descriptor socke
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor socke
\end_layout

\end_inset

t to be shut down.
 The 
\family typewriter
shutdown
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shutdown
\end_layout

\end_inset


\family default
 function takes the following arguments: the first argument specifies the
 file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 of the socket and the second argument specifies the type of shutdown.
 The values for this argument are as follows:
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
SHUT_RD
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SHUT_RD
\end_layout

\end_inset


\family default
 disables further receive operations;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
SHUT_WR
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SHUT_WR
\end_layout

\end_inset


\family default
 disables further send operations;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
SHUT_RDWR
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SHUT_RDWR
\end_layout

\end_inset


\family default
 disables further send and receive operations.
\end_layout

\begin_layout Standard
\noindent
The 
\family typewriter
shutdown
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shutdown
\end_layout

\end_inset


\family default
 function disables subsequent send and/or receive operations on a socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

, depending on the value of the second argument.
 Upon successful completion, 
\family typewriter
shutdown
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shutdown
\end_layout

\end_inset


\family default
 shall return 0; otherwise, -1 shall be returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to indicate the error.
 The close system call could be used to close a socket.
 If its first argument refers to a socket, 
\family typewriter
close
\family default
 shall cause the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 to be destroyed.
 If the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 is in connection-mode, and the 
\family typewriter
SO_LINGER
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SO_LINGER
\end_layout

\end_inset


\family default
 option is set for the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 with non-zero linger time and the socket
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket
\end_layout

\end_inset

 has untransmitted data, then 
\family typewriter
close
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
close
\end_layout

\end_inset


\family default
 shall block for up to the current linger interval until all data is transmitted.
\end_layout

\begin_layout Subsection
The 
\family typewriter
accept
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
accept
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
Server process use this function call to accept a connection on the socket.
 The 
\family typewriter
accept
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
accept
\end_layout

\end_inset


\family default
 function shall extract the first connection on the queue of pending connections
, create a new socket with the same socket type protocol and address family
 as the specified socket, and allocate a new file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 for that socket.
 The 
\family typewriter
accept
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
accept
\end_layout

\end_inset


\family default
 function takes three arguments: the first argument specifies a socket that
 was created with 
\family typewriter
socket
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
socket
\end_layout

\end_inset


\family default
, has been bound to an address with 
\family typewriter
bind
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
bind
\end_layout

\end_inset


\family default
 and has issued a successful call to 
\family typewriter
listen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
listen
\end_layout

\end_inset


\family default
.
 The second argument is either a null pointer or a pointer to a 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure where the address of the connecting socket shall be returned.
 The third argument is either a null pointer, if the second argument is
 a null pointer or a pointer to a 
\family typewriter
socklen_t
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
socklen_t
\end_layout

\end_inset


\family default
 object which on input specifies the length of the supplied 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure and on output specifies the length of the stored address.
 If the second argument is not a null pointer, the address of the peer for
 the accepted connection shall be stored in the sockaddr structure pointed
 to by this argument and the length of this address shall be stored in the
 object pointed to by the third argument.
 If the actual length of the address is greater than the length of the supplied
 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure, the stored address shall be truncated.
 If the protocol permits connections by unbound clients and the peer is
 not bound, then the value stored in the object pointed to by the second
 argument is unspecified.
 If the listen queue
\begin_inset Index idx
status open

\begin_layout Plain Layout
listen queue
\end_layout

\end_inset

 is empty of connection requests and 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 is not set on the file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 for the socket, 
\family typewriter
accept
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
accept
\end_layout

\end_inset


\family default
 shall block until a connection is present.
 If the 
\family typewriter
listen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
listen
\end_layout

\end_inset


\family default
 queue is empty of connection requests and 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 is set on the file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 for the socket, 
\family typewriter
accept
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
accept
\end_layout

\end_inset


\family default
 shall fail and set 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 to 
\family typewriter
EAGAIN
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EAGAIN
\end_layout

\end_inset


\family default
 or 
\family typewriter
EWOULDBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EWOULDBLOCK
\end_layout

\end_inset


\family default
.
 The accepted socket cannot itself accept more connections.
 The original socket remains open and can accept more connections.
 Upon successful completion, 
\family typewriter
accept
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
accept
\end_layout

\end_inset


\family default
 shall return the non-negative file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 of the accepted socket.
 Otherwise, -1 shall be returned, 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 shall be set to indicate the error, and any object pointed to by the third
 argument shall remain unchanged.
\end_layout

\begin_layout Subsection
The 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard

\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 is used by the client process to establish a connection with a server.
 The function shall attempt to make a connection on a connection-mode socket
 or to set or reset the peer address of a connectionless-mode socket.
 The function takes the following arguments: the first argument specifies
 the file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 associated with the socket.
 The second argument specifies a pointer to a 
\family typewriter
sockaddr
\family default
 structure containing the peer address.
 The length and format of the address depend on the address family of the
 socket.
 The third argument specifies the length of the 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure pointed to by the second argument.
 If the socket has not already been bound to a local address, 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 shall bind it to an address which, unless the socket's address family is
 
\family typewriter
AF_UNIX
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AF_UNIX
\end_layout

\end_inset


\family default
, is an unused local address.
 If the initiating socket is not connection-mode, then 
\family typewriter
connect
\family default
 shall set the socket's peer address, and no connection is made.
 For 
\family typewriter
SOCK_DGRAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_DGRAM
\end_layout

\end_inset


\family default
 sockets, the peer address identifies where all datagrams are sent on subsequent
 
\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
send
\end_layout

\end_inset


\family default
 functions and limits the remote sender for subsequent 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
 functions.
 If the 
\family typewriter
sa_family
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sa_family
\end_layout

\end_inset


\family default
 member of the structure pointer by the second argument is 
\family typewriter
AF_UNSPEC
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AF_UNSPEC
\end_layout

\end_inset


\family default
, the socket's peer address shall be reset.
 Note that despite no connection being made, the term 
\begin_inset Quotes eld
\end_inset

connected
\begin_inset Quotes erd
\end_inset

 is used to describe a connectionless-mode socket for which a peer address
 has been set.
 If the initiating socket is connection-mode, then 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 shall attempt to establish a connection to the address specified by the
 address argument.
 If the connection cannot be established immediately and 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 is not set for the file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 for the socket, 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 shall block for up to an unspecified timeout interval until the connection
 is established.
 If the timeout interval expires before the connection is established, 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 shall fail and the connection attempt shall be aborted.
 If 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 is interrupted by a signal that is caught while blocked waiting to establish
 a connection, 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 shall fail and set 
\family typewriter
errno
\family default
 to 
\family typewriter
EINTR
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EINTR
\end_layout

\end_inset


\family default
, but the connection request shall not be aborted, and the connection shall
 be established asynchronously.
 If the connection cannot be established immediately and 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 is set for the file descriptor for the socket, 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 shall fail and set errno to 
\family typewriter
EINPROGRESS
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EINPROGRESS
\end_layout

\end_inset


\family default
, but the connection request shall not be aborted, and the connection shall
 be established asynchronously.
 Subsequent calls to 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 for the same socket, before the connection is established, shall fail and
 set 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 to 
\family typewriter
EALREADY
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EALREADY
\end_layout

\end_inset


\family default
.
 When the connection has been established asynchronously, 
\family typewriter
pselect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
pselect
\end_layout

\end_inset


\family default
, 
\family typewriter
select
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
select
\end_layout

\end_inset


\family default
 and 
\family typewriter
poll
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
poll
\end_layout

\end_inset


\family default
 shall indicate that the file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 for the socket is ready for writing.
 The socket in use may require the process to have appropriate privileges
 to use the 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 function.
 Upon successful completion, 
\family typewriter
connect
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
connect
\end_layout

\end_inset


\family default
 shall return 0; otherwise, -1 shall be returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to indicate the error.
\end_layout

\begin_layout Subsection
Connectionless Sockets.
\end_layout

\begin_layout Standard
Sockets that use the 
\family typewriter
SOCK_DGRAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_DGRAM
\end_layout

\end_inset


\family default
 method of communication do not need to be connected in order to be used.
 This is because modified versions of 
\family typewriter
recv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recv
\end_layout

\end_inset


\family default
, 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 and 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 are used to send and receive datagrams.
\end_layout

\begin_layout Subsection
The sendto System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 function shall send a message through a connection-mode or connectionless-mode
 socket.
 If the socket is a connectionless-mode socket, the message shall be sent
 to the address specified by the fifth argument if no pre-specified peer
 address has been set.
 If a peer address has been pre-specified, either the message shall be sent
 to the address specified by the fifth argument, overriding the pre-specified
 peer address, or the function shall return -1 and set 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 to 
\family typewriter
EISCONN
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EISCONN
\end_layout

\end_inset


\family default
.
 If the socket is connection-mode, fifth argument be ignored.
 The 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 function takes the following arguments: the first argument specifies the
 socket file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket file descriptor
\end_layout

\end_inset

.
 The second argument is a pointer to a buffer containing the message to
 be sent.
 The third argument specifies the size of the message in bytes.
 The fourth argument specifies the type of message transmission.
 Values of this argument are formed by logically OR'ing zero or more of
 the following flags:
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
MSG_EOR
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_EOR
\end_layout

\end_inset


\family default
 terminates a record, if supported by the protocol;
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
MSG_OOB
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_OOB
\end_layout

\end_inset


\family default
 sends out-of-band data on sockets that support out-of-band data.
 The significance and semantics of out-of-band data are protocol-specific;
\end_layout

\begin_layout Labeling
\labelwidthstring 00000.00000.00000

\family typewriter
MSG_NOSIGNAL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_NOSIGNAL
\end_layout

\end_inset


\family default
 requests not to send the 
\family typewriter
SIGPIPE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SIGPIPE
\end_layout

\end_inset


\family default
 signal if an attempt to send is made on a stream-oriented socket that is
 no longer connected.
 The 
\family typewriter
EPIPE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EPIPE
\end_layout

\end_inset


\family default
 error shall still be returned.
\end_layout

\begin_layout Standard
\noindent
the fifth argument points to a 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure containing the destination address.
 The length and format of the address depend on the address family of the
 socket.
 The sixth argument specifies the length of the 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure pointed to by the fifth argument.
 If the socket protocol supports broadcast and the specified address is
 a broadcast address for the socket protocol, 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 shall fail if the 
\family typewriter
SO_BROADCAST
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SO_BROADCAST
\end_layout

\end_inset


\family default
 option is not set for the socket.
 The fifth argument specifies the address of the target.
 The third argument specifies the length of the message.
 Successful completion of a call to 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 does not guarantee delivery of the message.
 A return value of -1 indicates only locally-detected errors.
 If space is not available at the sending socket to hold the message to
 be transmitted and the socket file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
file descriptor
\end_layout

\end_inset

 does not have 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 set, 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 shall block until space is available.
 If space is not available at the sending socket to hold the message to
 be transmitted and the socket file descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
socket file descriptor
\end_layout

\end_inset

 does have 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 set, 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 shall fail.
 The socket in use may require the process to have appropriate privileges
 to use the 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 function.
 Upon successful completion, 
\family typewriter
sendto
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sendto
\end_layout

\end_inset


\family default
 shall return the number of bytes sent.
 Otherwise, -1 shall be returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to indicate the error.
\end_layout

\begin_layout Subsection
The recvfrom System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 function shall receive a message from a connection-mode or connectionless-mode
 socket.
 It is normally used with connectionless-mode sockets because it permits
 the application to retrieve the source address of received data.
 The 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 function takes the following arguments: the first arument specifies the
 socket file descriptor.
 The second argument is a pointer which points to the buffer where the message
 should be stored.
 The third argument specifies the length in bytes of the buffer pointed
 to by the buffer argument.
 The fourth argument specifies the type of message reception.
 Values of this argument are formed by logically OR'ing zero or more of
 the following values:
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
MSG_PEEK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_PEEK
\end_layout

\end_inset


\family default
 peeks at an incoming message.
 The data is treated as unread and the next 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 or similar function shall still return this data;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
MSG_OOB
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_OOB
\end_layout

\end_inset


\family default
 requests out-of-band data.
 The significance and semantics of out-of-band data are protocol-specific;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000
\noindent

\family typewriter
MSG_WAITALL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_WAITALL
\end_layout

\end_inset


\family default
 on 
\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
 sockets this requests that the function block until the full amount of
 data can be returned.
 The function may return the smaller amount of data if the socket is a message-b
ased socket, if a signal is caught, if the connection is terminated, if
 
\family typewriter
MSG_PEEK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_PEEK
\end_layout

\end_inset


\family default
 was specified, or if an error is pending for the socket.
\end_layout

\begin_layout Standard
\noindent
The fifth argument is a pointer to a 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure in which the sending address is to be stored.
 The length and format of the address depend on the address family of the
 socket.
 The sixth argument is either a null pointer, if address is a null pointer
 or a pointer to a 
\family typewriter
socklen_t
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
socklen_t
\end_layout

\end_inset


\family default
 object which on input specifies the length of the supplied 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure, and on output specifies the length of the stored address.
 The 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 function shall return the length of the message written to the buffer pointed
 to by the buffer argument.
 For message-based sockets, such as 
\family typewriter
SOCK_RAW
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_RAW
\end_layout

\end_inset


\family default
, 
\family typewriter
SOCK_DGRAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_DGRAM
\end_layout

\end_inset


\family default
 and 
\family typewriter
SOCK_SEQPACKET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_SEQPACKET
\end_layout

\end_inset


\family default
, the entire message shall be read in a single operation.
 If a message is too long to fit in the supplied buffer and 
\family typewriter
MSG_PEEK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_PEEK
\end_layout

\end_inset


\family default
 is not set in the fourth argument, the excess bytes shall be discarded.
 For stream-based sockets, such as 
\family typewriter
SOCK_STREAM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SOCK_STREAM
\end_layout

\end_inset


\family default
, message boundaries shall be ignored.
 In this case, data shall be returned to the user as soon as it becomes
 available, and no data shall be discarded.
 If the 
\family typewriter
MSG_WAITALL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MSG_WAITALL
\end_layout

\end_inset


\family default
 flag is not set, data shall be returned only up to the end of the first
 message.
 Not all protocols provide the source address for messages.
 If the fifth argument is not a null pointer and the protocol provides the
 source address of messages, the source address of the received message
 shall be stored in the 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure pointed to by the fifth argument and the length of this address
 shall be stored in the object pointed to by the sixth argument.
 If the actual length of the address is greater than the length of the supplied
 
\family typewriter
sockaddr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sockaddr
\end_layout

\end_inset


\family default
 structure, the stored address shall be truncated.
 If the fifth argument is not a null pointer and the protocol does not provide
 the source address of messages, the value stored in the object pointed
 to by the fifth argument is unspecified.
 If no messages are available at the socket and 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 is not set on the socket's file descriptor, 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 shall block until a message arrives.
 If no messages are available at the socket and 
\family typewriter
O_NONBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
O_NONBLOCK
\end_layout

\end_inset


\family default
 is set on the socket's file descriptor, 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 shall fail and set errno
\begin_inset Index idx
status open

\begin_layout Plain Layout
errno
\end_layout

\end_inset

 to 
\family typewriter
EAGAIN
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EAGAIN
\end_layout

\end_inset


\family default
 or 
\family typewriter
EWOULDBLOCK
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EWOULDBLOCK
\end_layout

\end_inset


\family default
.
 Upon successful completion, 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 shall return the length of the message in bytes.
 If no messages are available to be received and the peer has performed
 an orderly shutdown, 
\family typewriter
recvfrom
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
recvfrom
\end_layout

\end_inset


\family default
 shall return 0.
 Otherwise, the function shall return -1 and set 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 to indicate the error.
 
\end_layout

\begin_layout Subsection
A Small Client Program.
\end_layout

\begin_layout Standard
In listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:client"
plural "false"
caps "false"
noprefix "false"

\end_inset

 there's a program demonstrating a client connection to a server running
 on the localhost:
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:client"

\end_inset

client - client program to demonstrate sockets.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* File client.c */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <stdint.h>
\end_layout

\begin_layout Plain Layout

#include <stddef.h>
\end_layout

\begin_layout Plain Layout

#include <inttypes.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <sys/types.h>
\end_layout

\begin_layout Plain Layout

#include <sys/socket.h>
\end_layout

\begin_layout Plain Layout

#include <netinet/in.h>
\end_layout

\begin_layout Plain Layout

#include <arpa/inet.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* client program.
 */
\end_layout

\begin_layout Plain Layout

#define SERVER_PORT 10240
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

long int client(struct sockaddr_in *);
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int res;
\end_layout

\begin_layout Plain Layout

	long int ret;
\end_layout

\begin_layout Plain Layout

	struct sockaddr_in servaddr;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* */
\end_layout

\begin_layout Plain Layout

	servaddr.sin_family = AF_INET;
\end_layout

\begin_layout Plain Layout

	servaddr.sin_port = htons(SERVER_PORT);
\end_layout

\begin_layout Plain Layout

	res = inet_pton(AF_INET, "127.0.0.1", &servaddr.sin_addr);
\end_layout

\begin_layout Plain Layout

	ret = client(&servaddr);
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * client -- the client function.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

long int client(struct sockaddr_in *sa)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int sockfd;
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

	char *buff[ BUFSIZ ];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* */
\end_layout

\begin_layout Plain Layout

	if(sa) {
\end_layout

\begin_layout Plain Layout

		if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) >= 0) {
\end_layout

\begin_layout Plain Layout

			printf("Created socket: %d
\backslash
n", sockfd);
\end_layout

\begin_layout Plain Layout

			if(connect(sockfd, (struct sockaddr *) sa, sizeof(struct sockaddr_in))
 >= 0) {
\end_layout

\begin_layout Plain Layout

				printf("Connected to 0x%0.8x, port 0x%0.4x
\backslash
n", (u_int32_t) sa -> sin_addr.s_addr, ntohs(sa -> sin_port));
\end_layout

\begin_layout Plain Layout

				if(recv(sockfd, (void *) buff, BUFSIZ, MSG_WAITALL) >= 0) {
\end_layout

\begin_layout Plain Layout

					printf("Received data from server: %s
\backslash
n", buff);
\end_layout

\begin_layout Plain Layout

					ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

				} else
\end_layout

\begin_layout Plain Layout

					perror("recv");
\end_layout

\begin_layout Plain Layout

			} else
\end_layout

\begin_layout Plain Layout

				perror("connect");
\end_layout

\begin_layout Plain Layout

			close(sockfd);
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			perror("socket");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		fprintf(stderr, "NULL address passed.
\backslash
n");
\end_layout

\begin_layout Plain Layout

	return ret;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of client.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
A Small Server Program.
\end_layout

\begin_layout Standard
The server program in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:server"
plural "false"
caps "false"
noprefix "false"

\end_inset

 works with the previous example, the client program: 
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:server"

\end_inset

server - server program to demonstrate sockets.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* File server.c */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <stdint.h>
\end_layout

\begin_layout Plain Layout

#include <stddef.h>
\end_layout

\begin_layout Plain Layout

#include <inttypes.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <time.h>
\end_layout

\begin_layout Plain Layout

#include <errno.h>
\end_layout

\begin_layout Plain Layout

#include <sys/time.h>
\end_layout

\begin_layout Plain Layout

#include <sys/types.h>
\end_layout

\begin_layout Plain Layout

#include <sys/socket.h>
\end_layout

\begin_layout Plain Layout

#include <netinet/in.h>
\end_layout

\begin_layout Plain Layout

#include <arpa/inet.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* server program.
 */
\end_layout

\begin_layout Plain Layout

#define SERVER_PORT 10240
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

long int server(struct sockaddr_in *);
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long int ret;
\end_layout

\begin_layout Plain Layout

	struct sockaddr_in servaddr;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* clear the address structures in memory.
 */
\end_layout

\begin_layout Plain Layout

	bzero(&servaddr, sizeof(struct sockaddr_in));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* setup structures.
 */
\end_layout

\begin_layout Plain Layout

	servaddr.sin_family = AF_INET;
\end_layout

\begin_layout Plain Layout

	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
\end_layout

\begin_layout Plain Layout

	servaddr.sin_port = htons(SERVER_PORT);
\end_layout

\begin_layout Plain Layout

	ret = server(&servaddr);
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * client -- the client function.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

long int server(struct sockaddr_in *sa)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char *buff;
\end_layout

\begin_layout Plain Layout

	int listenfd, connfd;
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

	struct timeval now;
\end_layout

\begin_layout Plain Layout

	struct sockaddr_in cliaddr;
\end_layout

\begin_layout Plain Layout

	socklen_t cliaddrlen = sizeof(struct sockaddr_in);
\end_layout

\begin_layout Plain Layout

	pid_t pid;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* */
\end_layout

\begin_layout Plain Layout

	if(sa) {
\end_layout

\begin_layout Plain Layout

		bzero(&cliaddr, sizeof(struct sockaddr_in));
\end_layout

\begin_layout Plain Layout

		if((listenfd = socket(AF_INET, SOCK_STREAM, 0)) >= 0) {
\end_layout

\begin_layout Plain Layout

			if(bind(listenfd, (struct sockaddr *) sa, sizeof(struct sockaddr_in))
 >= 0) {
\end_layout

\begin_layout Plain Layout

				printf("Waiting to accept a connection...
\backslash
n");
\end_layout

\begin_layout Plain Layout

				if(listen(listenfd, 0) >= 0) {
\end_layout

\begin_layout Plain Layout

					FOREVER {
\end_layout

\begin_layout Plain Layout

						cliaddrlen = sizeof(cliaddr);
\end_layout

\begin_layout Plain Layout

						if((connfd = accept(listenfd, (struct sockaddr *) &cliaddr, &cliaddrlen))
 >= 0) {
\end_layout

\begin_layout Plain Layout

							printf("Accepted connection from 0x%0.8x, port 0x%0.4x
\backslash
n", cliaddr.sin_addr, ntohs(cliaddr.sin_port));
\end_layout

\begin_layout Plain Layout

							if((pid = fork()) == 0) {
\end_layout

\begin_layout Plain Layout

								close(listenfd);
\end_layout

\begin_layout Plain Layout

								if(gettimeofday(&now, NULL) >= 0) {
\end_layout

\begin_layout Plain Layout

									buff = ctime(&now.tv_sec);
\end_layout

\begin_layout Plain Layout

									if(buff) {
\end_layout

\begin_layout Plain Layout

										if(send(connfd, (void *) buff, strnlen(buff, BUFSIZ), 0) >= 0)
 {
\end_layout

\begin_layout Plain Layout

											ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

											break;
\end_layout

\begin_layout Plain Layout

										} else {
\end_layout

\begin_layout Plain Layout

											perror("send");
\end_layout

\begin_layout Plain Layout

											break;
\end_layout

\begin_layout Plain Layout

										}
\end_layout

\begin_layout Plain Layout

									} else {
\end_layout

\begin_layout Plain Layout

										fprintf(stderr, "empty time string");
\end_layout

\begin_layout Plain Layout

										break;
\end_layout

\begin_layout Plain Layout

									}
\end_layout

\begin_layout Plain Layout

								} else {
\end_layout

\begin_layout Plain Layout

									perror("gettimeofday");
\end_layout

\begin_layout Plain Layout

									break;
\end_layout

\begin_layout Plain Layout

								}
\end_layout

\begin_layout Plain Layout

							}
\end_layout

\begin_layout Plain Layout

							close(connfd);
\end_layout

\begin_layout Plain Layout

						} else {
\end_layout

\begin_layout Plain Layout

							perror("accept");
\end_layout

\begin_layout Plain Layout

							break;
\end_layout

\begin_layout Plain Layout

						}
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

				} else
\end_layout

\begin_layout Plain Layout

					perror("listen");
\end_layout

\begin_layout Plain Layout

			} else
\end_layout

\begin_layout Plain Layout

				perror("bind");
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			perror("socket");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		fprintf(stderr, "NULL address passed.
\backslash
n");
\end_layout

\begin_layout Plain Layout

	return ret;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of server.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:message-queues"

\end_inset

Message Queues.
\end_layout

\begin_layout Standard

\shape italic
Message queues
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
message queues
\end_layout

\end_inset


\shape default
 are a cross between a 
\shape italic
virtual circuit
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
virtual circuit
\end_layout

\end_inset


\shape default
 and datagrams.
 Distinct message 
\begin_inset Quotes eld
\end_inset

packets
\begin_inset Quotes erd
\end_inset

 are exchanged between processes using a queue mechanism so that data arrives
 in order, but the messages can be received in more or less any order determined
 by the receiving process(es).
 A message queue
\begin_inset Index idx
status open

\begin_layout Plain Layout
message queue
\end_layout

\end_inset

 is defined by a unique identifier called a 
\shape italic
queue id
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
queue id
\end_layout

\end_inset


\shape default
, which is usually a long integer.
 The queue itself is described by the following structure contained in 
\family typewriter
<sys/msg.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/msg.h>
\end_layout

\end_inset


\family default
, 
\family typewriter
<sys/types.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/types.h>
\end_layout

\end_inset


\family default
 must be included before too:
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:msqid_ds-struct"

\end_inset

The msqid_ds structure.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

struct msqid_ds {
\end_layout

\begin_layout Plain Layout

	struct ipc_perm msg_perm;
\end_layout

\begin_layout Plain Layout

	struct msg *msg_first;
\end_layout

\begin_layout Plain Layout

	struct msg *msg_last;
\end_layout

\begin_layout Plain Layout

	unsigned long msg_cbytes;
\end_layout

\begin_layout Plain Layout

	unsigned long msg_qnum;
\end_layout

\begin_layout Plain Layout

	unsigned long msg_qbytes;
\end_layout

\begin_layout Plain Layout

	pid_t msg_lspid;
\end_layout

\begin_layout Plain Layout

	pid_t msg_lrpid;
\end_layout

\begin_layout Plain Layout

	time_t msg_stime;
\end_layout

\begin_layout Plain Layout

	long msg_pad1;
\end_layout

\begin_layout Plain Layout

	time_t msg_rtime;
\end_layout

\begin_layout Plain Layout

	long msg_pad2;
\end_layout

\begin_layout Plain Layout

	time_t msg_ctime;
\end_layout

\begin_layout Plain Layout

	long msg_pad3;
\end_layout

\begin_layout Plain Layout

	long msg_pad4[ 4 ];
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The meanings of the structure members are:
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_perm
\family default
\series default
 msg queue permission bits;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_first
\family default
\series default
 first message in the queue;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_last
\family default
\series default
 last message in the queue;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_cbytes
\family default
\series default
 number of bytes in use on the queue;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_qnum
\family default
\series default
 number of msgs in the queue;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_qbytes
\family default
\series default
 maximum number of bytes on the queue;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_lspid
\family default
\series default
 pid of last 
\family typewriter
msgsnd
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgsnd
\end_layout

\end_inset

;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_lrpid
\family default
\series default
 pid of last 
\family typewriter
msgrcv
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgrcv
\end_layout

\end_inset

;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_stime
\family default
\series default
 time of last 
\family typewriter
msgsnd
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgsnd
\end_layout

\end_inset

;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_pad1
\family default
\series default
 structure pad member;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_rtime
\family default
\series default
 time of last 
\family typewriter
msgrcv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgrcv
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_pad2
\family default
\series default
 structure pad member;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_ctime
\family default
\series default
 time of last 
\family typewriter
msgctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgctl
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_pad3
\family default
\series default
 structure pad member;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
msg_pad4
\family default
\series default
 structure pad member.
\end_layout

\begin_layout Standard
The 
\family typewriter
ipc_perm
\family default
 structure
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ipc_perm
\family default
 structure
\end_layout

\end_inset

 defines the permissions on the message queue
\begin_inset Index idx
status open

\begin_layout Plain Layout
message queue
\end_layout

\end_inset

.
 It is defined in the include file 
\family typewriter
<sys/ipc.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/ipc.h>
\end_layout

\end_inset


\family default
:
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:ipc_perm-struct"

\end_inset

The ipc_perm structure.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

struct ipc_perm {
\end_layout

\begin_layout Plain Layout

	uid_t cuid;
\end_layout

\begin_layout Plain Layout

	gid_t cgid;
\end_layout

\begin_layout Plain Layout

	uid_t uid;
\end_layout

\begin_layout Plain Layout

	gid_t gid;
\end_layout

\begin_layout Plain Layout

	mode_t mode;
\end_layout

\begin_layout Plain Layout

	unsigned short seq;
\end_layout

\begin_layout Plain Layout

	key_t key;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The members are defined as:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
\series bold
cuid
\family default
\series default
 creator user id;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
\series bold
cgid
\family default
\series default
 creator group id;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
\series bold
uid
\family default
\series default
 user id;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
\series bold
gid
\family default
\series default
 group id;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
\series bold
mode
\family default
\series default
 r/w permission this is a bit mask:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
IPC_R
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_R
\end_layout

\end_inset


\family default
 — read permission;
\end_layout

\begin_layout Itemize

\family typewriter
IPC_W
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_W
\end_layout

\end_inset


\family default
 — write/alter permission;
\end_layout

\begin_layout Itemize

\family typewriter
IPC_M
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_M
\end_layout

\end_inset


\family default
 — permission to change control info.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent

\family typewriter
\series bold
seq
\family default
\series default
 sequence number, to generate unique msg/sem/shmid;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
\series bold
key
\family default
\series default
 user specified msg/sem/shm key.
\end_layout

\begin_layout Subsection
The 
\family typewriter
msgget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgget
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
msgget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgget
\end_layout

\end_inset


\family default
 function operates on 
\shape italic
XSI message queues
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
XSI message queues
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
See the Base Definitions volume of POSIX.1-2017, Section 3.226, Message Queue.
\end_layout

\end_inset


\shape default
.
 The 
\family typewriter
msgget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgget
\end_layout

\end_inset


\family default
 function shall return the message queue identifier associated with the
 argument key.
 A message queue identifier, associated message queue and data structure
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\family typewriter
<sys/msg.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/msg.h>
\end_layout

\end_inset


\family default
.
\end_layout

\end_inset

, shall be created for the first argument if one of the following is true:
\end_layout

\begin_layout Itemize
the first agument is equal to 
\family typewriter
IPC_PRIVATE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_PRIVATE
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Itemize
the first argument does not already have a message queue identifier associated
 with it and 
\family typewriter
(msgflg & IPC_CREAT)
\family default
 is non-zero.
\end_layout

\begin_layout Standard
Upon creation, the data structure associated with the new message queue
 identifier shall be initialized as follows:
\end_layout

\begin_layout Itemize

\family typewriter
msg_perm.cuid
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.cuid
\end_layout

\end_inset

, 
\family typewriter
msg_perm.uid
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.uid
\end_layout

\end_inset

, 
\family typewriter
msg_perm.cgid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.cgid
\end_layout

\end_inset


\family default
 and 
\family typewriter
msg_perm.gid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.gid
\end_layout

\end_inset


\family default
 shall be set to the effective user id
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective user id
\end_layout

\end_inset

 and effective group id
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective group id
\end_layout

\end_inset

, respectively, of the calling process;
\end_layout

\begin_layout Itemize
the low-order 9 bits of 
\family typewriter
msg_perm.mode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.mode
\end_layout

\end_inset


\family default
 shall be set to the low-order 9 bits of 
\family typewriter
msgflg
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgflg
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Itemize

\family typewriter
msg_qnum
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_qnum
\end_layout

\end_inset


\family default
, 
\family typewriter
msg_lspid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_lspid
\end_layout

\end_inset


\family default
, 
\family typewriter
msg_lrpid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_lrpid
\end_layout

\end_inset


\family default
, 
\family typewriter
msg_stime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_stime
\end_layout

\end_inset


\family default
 and 
\family typewriter
msg_rtime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_rtime
\end_layout

\end_inset


\family default
 shall be set to 0;
\end_layout

\begin_layout Itemize

\family typewriter
msg_ctime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_ctime
\end_layout

\end_inset


\family default
 shall be set to the current time;
\end_layout

\begin_layout Itemize

\family typewriter
msg_qbytes
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_qbytes
\end_layout

\end_inset


\family default
 shall be set to the system limit.
\end_layout

\begin_layout Standard
\noindent
Upon successful completion, 
\family typewriter
msgget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgget
\end_layout

\end_inset


\family default
 shall return a non-negative integer, namely a message queue identifier.
 Otherwise, it shall return -1 and set 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 to indicate the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
msgctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgctl
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
msgctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgctl
\end_layout

\end_inset


\family default
 function operates on XSI message queues
\begin_inset Index idx
status open

\begin_layout Plain Layout
XSI message queues
\end_layout

\end_inset

.
 This function takes three arguments and shall provide message control operation
s as specified by the second argument.
 The following values for the second argument and the message control operations
 they specify, are:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent

\family typewriter
IPC_STAT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_STAT
\end_layout

\end_inset


\family default
 place the current value of each member of the 
\family typewriter
msqid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msqid_ds
\end_layout

\end_inset


\family default
 data structure associated with 
\family typewriter
msqid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msqid
\end_layout

\end_inset


\family default
 into the structure pointed to by the third argument.
 The contents of this structure are defined in 
\family typewriter
<sys/msg.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/msg.h>
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
IPC_SET
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_SET
\end_layout

\end_inset


\family default
 set the value of the following members of the 
\family typewriter
msqid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msqid_ds
\end_layout

\end_inset


\family default
 data structure associated with the first parameter to the corresponding
 value found in the structure pointed to by the third argument:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
msg_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.uid
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
msg_perm.gid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.gid
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
msg_perm.mode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.mode
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
msg_qbytes
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_qbytes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also, the 
\family typewriter
msg_ctime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_ctime
\end_layout

\end_inset


\family default
 timestamp shall be set to the current time.
 
\family typewriter
IPC_SET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_SET
\end_layout

\end_inset


\family default
 can only be executed by a process with appropriate privileges or that has
 an effective user id
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective user id
\end_layout

\end_inset

 equal to the value of 
\family typewriter
msg_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.cuid
\end_layout

\end_inset


\family default
 or 
\family typewriter
msg_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.uid
\end_layout

\end_inset


\family default
 in the 
\family typewriter
msqid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msqid_ds
\end_layout

\end_inset


\family default
 data structure associated with the first parameter.
 Only a process with appropriate privileges can raise the value of 
\family typewriter
msg_qbytes
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_qbytes
\end_layout

\end_inset


\family default
;
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
IPC_RMID
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_RMID
\end_layout

\end_inset


\family default
 remove the message queue identifier specified by the first argument from
 the system and destroy the message queue and 
\family typewriter
msqid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msqid_ds
\end_layout

\end_inset


\family default
 data structure associated with it.
 
\family typewriter
IPC_RMD
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_RMD
\end_layout

\end_inset


\family default
 can only be executed by a process with appropriate privileges or one that
 has an effective user id
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective user id
\end_layout

\end_inset

 equal to the value of 
\family typewriter
msg_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.cuid
\end_layout

\end_inset


\family default
 or 
\family typewriter
msg_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_perm.uid
\end_layout

\end_inset


\family default
 in the 
\family typewriter
msqid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msqid_ds
\end_layout

\end_inset


\family default
 data structure associated with the value in the first argument.
\end_layout

\begin_layout Standard
\noindent
Upon successful completion, 
\family typewriter
msgctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgctl
\end_layout

\end_inset


\family default
 shall return 0; otherwise, it shall return -1 and set 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 to indicate the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
msgsnd
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgsnd
\end_layout

\end_inset


\family default
 and 
\family typewriter
msgrcv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgrcv
\end_layout

\end_inset


\family default
 System Calls.
\end_layout

\begin_layout Standard
The 
\family typewriter
msgsnd
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgsnd
\end_layout

\end_inset


\family default
 function operates on XSI message queues.
 The function take four arguments and shall send a message to the queue
 associated with the message queue identifier specified by the first argument
 value.
 The application shall ensure that the second argument points to a user-defined
 buffer that contains first a field of type long specifying the type of
 the message and then a data portion that holds the data bytes of the message.
 The structure below is an example of what this user- defined buffer might
 look like:
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:mymsg-struct"

\end_inset

Custom mymsg structure.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

struct mymsg {
\end_layout

\begin_layout Plain Layout

	long mtype;
\end_layout

\begin_layout Plain Layout

	char mtext[ 1 ];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The structure member 
\family typewriter
mtype
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mtype
\end_layout

\end_inset


\family default
 is a non-zero positive type long that can be used by the receiving process
 for message selection.
 The structure member 
\family typewriter
mtext
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mtext
\end_layout

\end_inset


\family default
 is any text of length which is the third argument value in bytes.
 This argument can range from 0 to a system-mposed maximum.
 The fourth and last argument specifies the action to be taken if one or
 more of the following is true:
\end_layout

\begin_layout Itemize
the number of bytes already on the queue is equal to 
\family typewriter
msg_qbytes
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_qbytes
\end_layout

\end_inset


\family default

\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\family typewriter
<sys/msg.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/msg.h>
\end_layout

\end_inset


\family default
.
\end_layout

\end_inset

; 
\end_layout

\begin_layout Itemize
the total number of messages on all queues system-wide is equal to the system-im
posed limit.
\end_layout

\begin_layout Standard
\noindent
These actions are as follows:
\end_layout

\begin_layout Itemize
if 
\family typewriter
(msgflg & IPC_NOWAIT)
\family default
 is non-zero, the message shall not be sent and the calling thread shall
 return immediately;
\end_layout

\begin_layout Itemize
if 
\family typewriter
(msgflg & IPC_NOWAIT)
\family default
 is 0, the calling thread shall suspend execution until one of the following
 occurs:
\end_layout

\begin_deeper
\begin_layout Itemize
the condition responsible for the suspension no longer exists, in which
 case the message is sent;
\end_layout

\begin_layout Itemize
the message queue identifier msqid is removed from the system; when this
 occurs, 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 shall be set to 
\family typewriter
EIDRM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EIDRM
\end_layout

\end_inset


\family default
 and -1 shall be returned;
\end_layout

\begin_layout Itemize
the calling thread receives a signal that is to be caught; in this case
 the message is not sent and the calling thread resumes execution in the
 manner prescribed in 
\family typewriter
sigaction
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigaction
\end_layout

\end_inset


\family default
;
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Upon successful completion, the following actions are taken with respect
 to the data structure associated with msqid
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\family typewriter
<sys/msg.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/msg.h>
\end_layout

\end_inset


\family default
.
\end_layout

\end_inset

; 
\end_layout

\begin_layout Itemize

\family typewriter
msg_qnum
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_qnum
\end_layout

\end_inset


\family default
 shall be incremented by 1.
\end_layout

\begin_layout Itemize

\family typewriter
msg_lspid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_lspid
\end_layout

\end_inset


\family default
 shall be set to the process id
\begin_inset Index idx
status open

\begin_layout Plain Layout
process id
\end_layout

\end_inset

 of the calling process.
\end_layout

\begin_layout Itemize

\family typewriter
msg_stime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_stime
\end_layout

\end_inset


\family default
 shall be set to the current time.
\end_layout

\begin_layout Standard
\noindent
Upon successful completion, 
\family typewriter
msgsnd
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgsnd
\end_layout

\end_inset


\family default
 shall return 0; otherwise, no message shall be sent, 
\family typewriter
msgsnd
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgsnd
\end_layout

\end_inset


\family default
 shall return -1 and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 shall be set to indicate the error.
 The 
\family typewriter
msgrcv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgrcv
\end_layout

\end_inset


\family default
 function operates on XSI message queues as the 
\family typewriter
msgsnd
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgsnd
\end_layout

\end_inset


\family default
 function and it takes five arguments.
 The function shall read a message from the queue associated with the message
 queue identifier specified by the first argument and place it in the user-defin
ed buffer pointed to by the second argument pointer.
 The application shall ensure that the second argument points to a user-defined
 buffer that contains first a field of type long, specifying the type of
 the message and then a data portion that holds the data bytes of the message.
 The user defined structure is the same of the 
\family typewriter
msgsnd
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgsnd
\end_layout

\end_inset


\family default
 function.
 The structure member 
\family typewriter
mtype
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mtype
\end_layout

\end_inset


\family default
 is the received message's type as specified by the sending process.
 The structure member 
\family typewriter
mtext
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mtext
\end_layout

\end_inset


\family default
 is the text of the message.
 The third argument specifies the size in bytes of the member 
\family typewriter
mtext
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mtext
\end_layout

\end_inset


\family default
.
 The received message shall be truncated to the third argument value in
 bytes if it is larger and 
\family typewriter
(msgflg & MSG_NOERROR)
\family default
 is non-zero.
 The truncated part of the message shall be lost and no indication of the
 truncation shall be given to the calling process.
 If the value of the thord argument is greater than 
\family typewriter
SSIZE_MAX
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SSIZE_MAX
\end_layout

\end_inset


\family default
, the result is implementation-defined.
 The fourth argument specifies the type of message requested as follows:
\end_layout

\begin_layout Itemize
if is 0, the first message on the queue shall be received;
\end_layout

\begin_layout Itemize
if is greater than 0, the first message of type 
\family typewriter
msgtyp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgtyp
\end_layout

\end_inset


\family default
 shall be received;
\end_layout

\begin_layout Itemize
if is less than 0, the first message of the lowest type that is less than
 or equal to the absolute value of the fourth argument shall be received.
\end_layout

\begin_layout Standard
\noindent
The fifth argument specifies the action to be taken if a message of the
 desired type is not on the queue.
 These are as follows:
\end_layout

\begin_layout Itemize
if 
\family typewriter
(msgflg & IPC_NOWAIT)
\family default
 is non-zero, the calling thread shall return immediately with a return
 value of -1 and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to 
\family typewriter
ENOMSG
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ENOMSG
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Itemize
if 
\family typewriter
(msgflg & IPC_NOWAIT)
\family default
 is 0, the calling thread shall suspend execution until one of the following
 occurs:
\end_layout

\begin_deeper
\begin_layout Itemize
a message of the desired type is placed on the queue;
\end_layout

\begin_layout Itemize
the message queue identifier msqid is removed from the system; when this
 occurs, 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 shall be set to EIDRM
\begin_inset Index idx
status open

\begin_layout Plain Layout
EIDRM
\end_layout

\end_inset

 and -1 shall be returned;
\end_layout

\begin_layout Itemize
the calling thread receives a signal that is to be caught; in this case
 a message is not received and the calling thread resumes execution in the
 manner prescribed in 
\family typewriter
sigaction
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sigaction
\end_layout

\end_inset


\family default
.
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Upon successful completion, the following actions are taken with respect
 to the data structure associated with msqid:
\end_layout

\begin_layout Itemize

\family typewriter
msg_qnum
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_qnum
\end_layout

\end_inset


\family default
 shall be decremented by 1;
\end_layout

\begin_layout Itemize

\family typewriter
msg_lrpid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_lrpid
\end_layout

\end_inset


\family default
 shall be set to the process id
\begin_inset Index idx
status open

\begin_layout Plain Layout
process id
\end_layout

\end_inset

 of the calling process;
\end_layout

\begin_layout Itemize

\family typewriter
msg_rtime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msg_rtime
\end_layout

\end_inset


\family default
 shall be set to the current time.
\end_layout

\begin_layout Standard
\noindent
Upon successful completion, 
\family typewriter
msgrcv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgrcv
\end_layout

\end_inset


\family default
 shall return a value equal to the number of bytes actually placed into
 the buffer 
\family typewriter
mtext
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mtext
\end_layout

\end_inset


\family default
.
 Otherwise, no message shall be received, 
\family typewriter
msgrcv
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
msgrcv
\end_layout

\end_inset


\family default
 shall return -1, and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 shall be set to indicate the error.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:mq-server"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a server program that creates a message queue and then waits for
 a message to be sent to it.
 After it receives the message, the program will respond with a message
 of its own:
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:mq-server"

\end_inset

mq-server - server program to demonstrate message queues.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* File mqserver.c.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <sys/types.h>
\end_layout

\begin_layout Plain Layout

#include <sys/ipc.h>
\end_layout

\begin_layout Plain Layout

#include <sys/msg.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* mqserver program.
 */
\end_layout

\begin_layout Plain Layout

#define MSGSZ 128
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Declare the message structure.
 */
\end_layout

\begin_layout Plain Layout

struct tagMessage {
\end_layout

\begin_layout Plain Layout

	long mtype;
\end_layout

\begin_layout Plain Layout

	char mtext[ MSGSZ ];
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct tagMessage message_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

	int msqid;
\end_layout

\begin_layout Plain Layout

	key_t key;
\end_layout

\begin_layout Plain Layout

	message_t sbuf, rbuf;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Create a message queue with "name" 1234.
 */
\end_layout

\begin_layout Plain Layout

	key = 1234;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*
\end_layout

\begin_layout Plain Layout

	 * We want to let everyone read and
\end_layout

\begin_layout Plain Layout

	 * write on this message queue, hence
\end_layout

\begin_layout Plain Layout

	 * we use 0666 as the permissions.
\end_layout

\begin_layout Plain Layout

	 */
\end_layout

\begin_layout Plain Layout

	if((msqid = msgget(key, IPC_CREAT | 0666)) >= 0) {
\end_layout

\begin_layout Plain Layout

		printf("Wait for a client message.
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* Receive a message.
 */
\end_layout

\begin_layout Plain Layout

		if(msgrcv(msqid, &rbuf, MSGSZ, 0, 0) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/* Print the client message.
 */
\end_layout

\begin_layout Plain Layout

			printf("client message: %s
\backslash
n", rbuf.mtext);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/* We send a message of type 2.
 */
\end_layout

\begin_layout Plain Layout

			sbuf.mtype = 2;
\end_layout

\begin_layout Plain Layout

			snprintf(sbuf.mtext, MSGSZ, "I received your message.");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/* Send an answer.
 */
\end_layout

\begin_layout Plain Layout

			if(msgsnd(msqid, &sbuf, strnlen(sbuf.mtext, MSGSZ) + 1, 0) >= 0) {
\end_layout

\begin_layout Plain Layout

				if(msgctl(msqid, IPC_RMID, NULL) >= 0)
\end_layout

\begin_layout Plain Layout

					ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

				else
\end_layout

\begin_layout Plain Layout

					perror("msgctl");
\end_layout

\begin_layout Plain Layout

			} else
\end_layout

\begin_layout Plain Layout

				perror("msgsnd");
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			perror("msgrcv");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		perror("msgget");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Exit.
 */
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of mqserver.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:mq-client"
plural "false"
caps "false"
noprefix "false"

\end_inset

 show a client process that sends a message to the server and then waits
 for a response and prints it on the screen.
 Before running the program, start up the server process in the background:
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:mq-client"

\end_inset

mq-client - client program to demonstrate message queues.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* File mqclient.c.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <sys/types.h>
\end_layout

\begin_layout Plain Layout

#include <sys/ipc.h>
\end_layout

\begin_layout Plain Layout

#include <sys/msg.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* mqclient program.
 */
\end_layout

\begin_layout Plain Layout

#define MSGSZ 128
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Declare the message structure.
 */
\end_layout

\begin_layout Plain Layout

struct tagMessage {
\end_layout

\begin_layout Plain Layout

	long mtype;
\end_layout

\begin_layout Plain Layout

	char mtext[ MSGSZ ];
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct tagMessage message_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

	int msqid;
\end_layout

\begin_layout Plain Layout

	key_t key;
\end_layout

\begin_layout Plain Layout

	message_t sbuf, rbuf;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Create a message queue with "name" 1234.
 */
\end_layout

\begin_layout Plain Layout

	key = 1234;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*
\end_layout

\begin_layout Plain Layout

	 * Get the message queue id for the
\end_layout

\begin_layout Plain Layout

	 * "name" 1234, which was created by
\end_layout

\begin_layout Plain Layout

	 * the server.
\end_layout

\begin_layout Plain Layout

	 */
\end_layout

\begin_layout Plain Layout

	if((msqid = msgget(key, 0666)) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * We'll send message type 1, the server
\end_layout

\begin_layout Plain Layout

		 * will send message type 2.
\end_layout

\begin_layout Plain Layout

		 */
\end_layout

\begin_layout Plain Layout

		sbuf.mtype = 1;
\end_layout

\begin_layout Plain Layout

		snprintf(sbuf.mtext, MSGSZ, "Did you get this?");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* Send message.
 */
\end_layout

\begin_layout Plain Layout

		if(msgsnd(msqid, &sbuf, strnlen(sbuf.mtext, MSGSZ) + 1, 0) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/* Receive an answer of message type 2.
 */
\end_layout

\begin_layout Plain Layout

			if(msgrcv(msqid, &rbuf, strnlen(rbuf.mtext, MSGSZ) + 1, 2, 0) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

				/* Print the answer.
 */
\end_layout

\begin_layout Plain Layout

				printf("server message: %s
\backslash
n", rbuf.mtext);
\end_layout

\begin_layout Plain Layout

				ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

			} else
\end_layout

\begin_layout Plain Layout

				perror("msgrcv");
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			perror("msgsnd");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

    	perror("msgget");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Exit.
 */
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of mqclient.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:semaphores"

\end_inset

Semaphores.
\end_layout

\begin_layout Standard
Semaphores
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

 are special types of flags used for signalling between two processes.
 They are tipically used to guard 
\begin_inset Quotes eld
\end_inset

critical sections
\begin_inset Quotes erd
\end_inset

 of code that modify shared data structures.
 In general, a section of code is written so that it cannot begin until
 a given semaphore
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

 is equal to a specific value.
 For example a program might wait until the semaphore
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

 is equal to zero.
 Then it would set the semaphore
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

 to one and perform some actions with a shared data structure and then reset
 the semaphore to zero.
 Other processes, also waiting until the semaphore
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

 is equal to zero, are effectively 
\begin_inset Quotes eld
\end_inset

locked out
\begin_inset Quotes erd
\end_inset

 from modifying the data structure while it is in use.
 When the semaphore
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

 becomes equal to zero again, the system will allow one of the waiting process
 to proceed.
 Semaphores are allocated in sets; each set is defined by unique 
\shape italic
semaphore id
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
semaphore id
\end_layout

\end_inset


\shape default
.
 The semaphores in a semaphore set
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore set
\end_layout

\end_inset

 are numbered consecutively starting from zero.
 The sets themselves are described in a structure of type 
\family typewriter
semid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semid_ds structure
\end_layout

\end_inset


\family default
, declared in the include file 
\family typewriter
<sys/sem.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/sem.h>
\end_layout

\end_inset


\family default
, 
\family typewriter
<sys/types.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/types.h>
\end_layout

\end_inset


\family default
 must also be included:
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:semid_ds-struct"

\end_inset

The semid_ds structure.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

struct semid_ds {
\end_layout

\begin_layout Plain Layout

	struct ipc_perm sem_perm;
\end_layout

\begin_layout Plain Layout

	struct sem *sem_base;
\end_layout

\begin_layout Plain Layout

	unsigned short sem_nsems;
\end_layout

\begin_layout Plain Layout

	time_t sem_otime;
\end_layout

\begin_layout Plain Layout

	long sem_pad1;
\end_layout

\begin_layout Plain Layout

	time_t sem_ctime;
\end_layout

\begin_layout Plain Layout

	long sem_pad2;
\end_layout

\begin_layout Plain Layout

	long sem_pad3[ 4 ];
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The members are defined as:
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
\series bold
sem_perm
\family default
\series default
 operation permission struct;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
\series bold
sem_base
\family default
\series default
 pointer to first semaphore in set;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
\series bold
sem_nsems
\family default
\series default
 number of sems in set; 
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
\series bold
sem_otime
\family default
\series default
 last operation time;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
\series bold
sem_pad1
\family default
\series default
 SVABI/386 says I need this here (LOLx1);
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
\series bold
sem_ctime
\family default
\series default
 last change time.
 Times measured in secs since 00:00:00 GMT, Jan.
 1, 1970;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
\series bold
sem_pad2
\family default
\series default
 SVABI/386 says I need this here (LOLx2);
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
\series bold
sem_pad3
\family default
\series default
 SVABI/386 says I need this here (LOLx3).
\end_layout

\begin_layout Subsection
The 
\family typewriter
semget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semget
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
semget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semget
\end_layout

\end_inset


\family default
 system call
\begin_inset Index idx
status open

\begin_layout Plain Layout
system call
\end_layout

\end_inset

 takes three arguments and returns the semaphore identifier
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore identifier
\end_layout

\end_inset

 associated with the first argument which is the key.
 A new set containing a number of semaphores as per the second argument
 is created if either the first argument is equal to 
\family typewriter
IPC_PRIVATE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_PRIVATE
\end_layout

\end_inset


\family default
 or the second argument does not have a semaphore set
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore set
\end_layout

\end_inset

 associated with it and the 
\family typewriter
IPC_CREAT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_CREAT
\end_layout

\end_inset


\family default
 bit is set in the third argument.
 The access modes of the created semaphores is specified in the third argument
 as a bitwise OR of zero or more of the following values:
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000
\noindent

\family typewriter
SEM_A
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SEM_A
\end_layout

\end_inset


\family default
 alter permission for owner 
\family typewriter
SEM_R
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SEM_R
\end_layout

\end_inset


\family default
 read permission for owner;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
(SEM_A>>3)
\family default
 alter permission for group 
\family typewriter
(SEM_R >> 3)
\family default
 read permission for group;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000

\family typewriter
(SEM_A>>6)
\family default
 alter permission for other 
\family typewriter
(SEM_R >> 6)
\family default
 read permission for other;
\end_layout

\begin_layout Standard
If a new set of semaphores is created, the data structure associated with
 it, the 
\family typewriter
semid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semid_ds
\end_layout

\end_inset


\family default
 structure, is initialized as follows:
\end_layout

\begin_layout Itemize

\family typewriter
sem_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.cuid
\end_layout

\end_inset


\family default
 and 
\family typewriter
sem_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.uid
\end_layout

\end_inset


\family default
 are set to the effective 
\family typewriter
UID
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
UID
\end_layout

\end_inset


\family default
 of the calling process;
\end_layout

\begin_layout Itemize

\family typewriter
sem_perm.gid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.gid
\end_layout

\end_inset


\family default
 and 
\family typewriter
sem_perm.cgid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.cgid
\end_layout

\end_inset


\family default
 are set to the effective 
\family typewriter
GID
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GID
\end_layout

\end_inset


\family default
 of the calling process;
\end_layout

\begin_layout Itemize

\family typewriter
sem_perm.mode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.mode
\end_layout

\end_inset


\family default
 is set to the lower 9 bits of the third argument;
\end_layout

\begin_layout Itemize

\family typewriter
sem_nsems
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_nsems
\end_layout

\end_inset


\family default
 is set to the value of the second argument;
\end_layout

\begin_layout Itemize

\family typewriter
sem_ctime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_ctime
\end_layout

\end_inset


\family default
 is set to the current time;
\end_layout

\begin_layout Itemize

\family typewriter
sem_otime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_otime
\end_layout

\end_inset


\family default
 is set to 0.
\end_layout

\begin_layout Standard
\noindent

\family typewriter
semget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semget
\end_layout

\end_inset


\family default
 returns a non-negative semaphore identifier
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore identifier
\end_layout

\end_inset

 if successful.
 Otherwise, -1 is returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 is set to reflect the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
semctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semctl
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
semctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semctl
\end_layout

\end_inset


\family default
 system call
\begin_inset Index idx
status open

\begin_layout Plain Layout
system call
\end_layout

\end_inset

 takes four arguments and provides a number of control operations on the
 semaphore
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

 specified by the fourth argument and the first one.
 The operation to be performed is specified in the third argument.
 The fourth argument is a union of the following fields:
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

int val; /* value for SETVAL */
\end_layout

\begin_layout Plain Layout

struct semid_ds *buf; /* buffer for IPC_{STAT,SET} */
\end_layout

\begin_layout Plain Layout

u_short *array; /* array for GETALL & SETALL */
\end_layout

\end_inset

The 
\family typewriter
semid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semid_ds
\end_layout

\end_inset


\family default
 structure used in the 
\family typewriter
IPC_SET
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_SET
\end_layout

\end_inset


\family default
 and 
\family typewriter
IPC_STAT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_STAT
\end_layout

\end_inset


\family default
 commands is defined as follows in 
\family typewriter
<sys/sem.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/sem.h>
\end_layout

\end_inset


\family default
.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:semid_ds-struct"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The ipc_perm structure used inside the semid_ds structure is defined in
 
\family typewriter
<sys/ipc.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/ipc.h>
\end_layout

\end_inset


\family default
.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:ipc_perm-struct"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\family typewriter
semctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semctl
\end_layout

\end_inset


\family default
 provides the following operations:
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000
\noindent

\family typewriter
GETVAL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
GETVAL
\end_layout

\end_inset


\family default
 return the value of the semaphore;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000

\family typewriter
SETVAL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SETVAL
\end_layout

\end_inset


\family default
 set the value of the semaphore to arg.val;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000

\family typewriter
GETPID
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
GETPID
\end_layout

\end_inset


\family default
 return the pid of the last process that did an operation on this semaphore;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000

\family typewriter
GETNCNT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
GETNCNT
\end_layout

\end_inset


\family default
 return the number of processes waiting to acquire the semaphore;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000

\family typewriter
GETZCNT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
GETZCNT
\end_layout

\end_inset


\family default
 return the number of processes waiting for the value of the semaphore to
 reach 0;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000

\family typewriter
GETALL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
GETALL
\end_layout

\end_inset


\family default
 return the values for all the semaphores associated with semid;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000

\family typewriter
SETALL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SETALL
\end_layout

\end_inset


\family default
 set the values for all the semaphores that are associated with the semaphore
 identifier semid to the corresponding values in 
\family typewriter
arg.array
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
arg.array
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000

\family typewriter
IPC_STAT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_STAT
\end_layout

\end_inset


\family default
 gather statistics about a semaphore and place the information in the semid_ds
 structure pointed to by 
\family typewriter
arg.buf
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
arg.buf
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000
\noindent

\family typewriter
IPC_SET
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_SET
\end_layout

\end_inset


\family default
 set the value of the 
\family typewriter
sem_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.uid
\end_layout

\end_inset


\family default
, 
\family typewriter
sem_perm.gid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.gid
\end_layout

\end_inset


\family default
 and 
\family typewriter
sem_perm.mode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.mode
\end_layout

\end_inset


\family default
 fields in the structure associated with the semaphore
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

.
 The values are taken from the corresponding fields in the structure pointed
 to by 
\family typewriter
arg.buf
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
arg.buf
\end_layout

\end_inset


\family default
.
 This operation can only be executed by the super-user
\begin_inset Index idx
status open

\begin_layout Plain Layout
super-user
\end_layout

\end_inset

 or a process that has an effective user id
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective user id
\end_layout

\end_inset

 equal to either 
\family typewriter
sem_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.cuid
\end_layout

\end_inset


\family default
 or 
\family typewriter
sem_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.uid
\end_layout

\end_inset


\family default
 in the data structure associated with the message queue;
\end_layout

\begin_layout Labeling
\labelwidthstring 000.000.0000

\family typewriter
IPC_RMID
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_RMID
\end_layout

\end_inset


\family default
 remove the semaphores associated with semid from the system and destroy
 the data structures associated with it.
 Only the super-user
\begin_inset Index idx
status open

\begin_layout Plain Layout
super-user
\end_layout

\end_inset

 or a process with an effective UID
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective UID
\end_layout

\end_inset

 equal to the 
\family typewriter
sem_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.cuid
\end_layout

\end_inset


\family default
 or 
\family typewriter
sem_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.uid
\end_layout

\end_inset


\family default
 values in the data structure associated with the semaphore
\begin_inset Index idx
status open

\begin_layout Plain Layout
semaphore
\end_layout

\end_inset

 can do this.
\end_layout

\begin_layout Standard
\noindent
The permission to read or change a message queue
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\shape italic
semop
\shape default
(2).
\end_layout

\end_inset

 is determined by the 
\family typewriter
sem_perm.mode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.mode
\end_layout

\end_inset


\family default
 field in the same way as is done with files
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\shape italic
chmod
\shape default
(2).
\end_layout

\end_inset

, but the effective UID
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective UID
\end_layout

\end_inset

 can match either the 
\family typewriter
sem_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.cuid
\end_layout

\end_inset


\family default
 field or the 
\family typewriter
sem_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.uid
\end_layout

\end_inset


\family default
 field and the effective GID
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective GID
\end_layout

\end_inset

 can match either 
\family typewriter
sem_perm.cgid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.cgid
\end_layout

\end_inset


\family default
 or 
\family typewriter
sem_perm.gid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_perm.gid
\end_layout

\end_inset


\family default
.
 For the 
\family typewriter
GETVAL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GETVAL
\end_layout

\end_inset


\family default
, 
\family typewriter
GETPID
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GETPID
\end_layout

\end_inset


\family default
, 
\family typewriter
GETNCNT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GETNCNT
\end_layout

\end_inset


\family default
 and 
\family typewriter
GETZCNT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GETZCNT
\end_layout

\end_inset


\family default
 operations, 
\family typewriter
semctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semctl
\end_layout

\end_inset


\family default
 returns one of the values described above if successful.
 All other operations will make 
\family typewriter
semctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semctl
\end_layout

\end_inset


\family default
 return 0 if no errors occur.
 Otherwise -1 is returned and 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 set to reflect the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
semop
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semop
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
\noindent

\family typewriter
semop
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
semop
\end_layout

\end_inset


\family default
 provides a number of atomic operations on a set of semaphores.
 It takes three arguments.
 The semaphore set is specified by its first argument.
 The second argument is an array of semaphore operations and the third is
 the number of operations in this array.
 The sembuf structures in the array contain the following members:
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

u_short sem_num; /* semaphore # */
\end_layout

\begin_layout Plain Layout

short sem_op; /* semaphore operation */
\end_layout

\begin_layout Plain Layout

short sem_flg; /* operation flags */
\end_layout

\end_inset

Each operation, specified in 
\family typewriter
sem_op
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_op
\end_layout

\end_inset


\family default
, is applied to semaphore number 
\family typewriter
sem_num
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_num
\end_layout

\end_inset


\family default
 in the set of semaphores specified by the first function argument.
 The value of 
\family typewriter
sem_op
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_op
\end_layout

\end_inset


\family default
 determines the action taken in the following way:
\end_layout

\begin_layout Itemize

\family typewriter
sem_op
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_op
\end_layout

\end_inset


\family default
 is less than 0.
 The current process is blocked until the value of the semaphore is greater
 than or equal to the absolute value of sem_op
\begin_inset Index idx
status open

\begin_layout Plain Layout
sem_op
\end_layout

\end_inset

.
 The absolute value of 
\family typewriter
sem_op
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_op
\end_layout

\end_inset


\family default
 is then subtracted from the value of the semaphore and the calling process
 continues.
 Negative values of 
\family typewriter
sem_op
\family default
 are thus used to enter critical regions;
\end_layout

\begin_layout Itemize

\family typewriter
sem_op
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_op
\end_layout

\end_inset


\family default
 is greater than 0.
 Its value is added to the value of the specified semaphore.
 This is used to leave critical regions;
\end_layout

\begin_layout Itemize

\family typewriter
sem_op
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_op
\end_layout

\end_inset


\family default
 is equal to 0.
 The calling process is blocked until the value of the specified semaphore
 reaches 0.
\end_layout

\begin_layout Standard
\noindent
The behavior of each operation is influenced by the flags set in 
\family typewriter
sem_flg
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sem_flg
\end_layout

\end_inset


\family default
 in the following way:
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000
\noindent

\family typewriter
IPC_NOWAIT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_NOWAIT
\end_layout

\end_inset


\family default
 in the case where the calling process would normally block, waiting for
 a semaphore to reach a certain value, 
\family typewriter
IPC_NOWAIT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_NOWAIT
\end_layout

\end_inset


\family default
 makes the call return immediately, returning a value of -1 and setting
 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 to 
\family typewriter
EAGAIN
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
EAGAIN
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Labeling
\labelwidthstring 0000.0000.0000
\noindent

\family typewriter
SEM_UNDO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
SEM_UNDO
\end_layout

\end_inset


\family default
 keep track of the changes that this call makes to the value of a semaphore,
 so that they can be undone when the calling process terminates.
 This is useful to prevent other processes waiting on a semaphore to block
 forever, should the process that has the semaphore locked terminate in
 a critical section.
\end_layout

\begin_layout Standard
\noindent
Upon successful completion, the value 0 is returned; otherwise the value
 -1 is returned and the global variable errno
\begin_inset Index idx
status open

\begin_layout Plain Layout
errno
\end_layout

\end_inset

 is set to indicate the error.
 On OpenBSD there is also an implementation of POSIX compliant semaphores
 which we will not describe here.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:semcreate"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a program to create a group of semaphores.
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:semcreate"

\end_inset

semcreate - creates a semaphore group.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* File semcreate.c.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <sys/types.h>
\end_layout

\begin_layout Plain Layout

#include <sys/sem.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* semcreate program.
 */
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int c, i, oflag, semid, nsems;
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

	key_t key;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* */
\end_layout

\begin_layout Plain Layout

	oflag = IPC_CREAT | 0666;
\end_layout

\begin_layout Plain Layout

	while((c = getopt(argc, argv, "e")) != -1) {
\end_layout

\begin_layout Plain Layout

		switch(c) {
\end_layout

\begin_layout Plain Layout

		case 'e':
\end_layout

\begin_layout Plain Layout

			oflag |= IPC_EXCL;
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		default:
\end_layout

\begin_layout Plain Layout

			;
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if(optind == (argc - 2)) {
\end_layout

\begin_layout Plain Layout

		nsems = atoi(argv[ optind + 1 ]);
\end_layout

\begin_layout Plain Layout

		printf("Creating %d semaphore%s", nsems, nsems > 1 ? "s.
\backslash
n" : ".
\backslash
n");
\end_layout

\begin_layout Plain Layout

		if((key = ftok(argv[ optind ], 0)) >= 0) {
\end_layout

\begin_layout Plain Layout

			printf("creating key from path %s: %d
\backslash
n", argv[ optind ], key);
\end_layout

\begin_layout Plain Layout

			if((semid = semget(key, nsems, oflag)) >= 0)
\end_layout

\begin_layout Plain Layout

				ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

			else
\end_layout

\begin_layout Plain Layout

				perror("semget");
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			perror("ftok");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		fprintf(stderr, "usage: semcreate [ -e ] <pathname> <nsems>
\backslash
n");
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of semcreate.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:shared-memory"

\end_inset

Shared Memory.
\end_layout

\begin_layout Standard
Shared memory provides a method for two or more programs to share a segment
 of virtual memory and use it as if it were actually part of each program.
 This is useful, possibly in conjunction with semaphores, for having multiple
 processes update the same data structures.
 A shared memory segment is described by a unique identifier called a shared
 memory id.
 The shared memory segment itself is described by a structure of type shmid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout
shmid_ds structure
\end_layout

\end_inset

, declared in the include file 
\family typewriter
<sys/shm.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/shm.h>
\end_layout

\end_inset


\family default
, 
\family typewriter
<sys/types.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/types.h>
\end_layout

\end_inset


\family default
 must also be included before:
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:shmid_ds-struct"

\end_inset

The shmid_ds structure.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

struct shmid_ds {
\end_layout

\begin_layout Plain Layout

	struct ipc_perm shm_perm;
\end_layout

\begin_layout Plain Layout

	int shm_segsz;
\end_layout

\begin_layout Plain Layout

	pid_t shm_lpid;
\end_layout

\begin_layout Plain Layout

	pid_t shm_cpid;
\end_layout

\begin_layout Plain Layout

	short shm_nattch;
\end_layout

\begin_layout Plain Layout

	time_t shm_atime;
\end_layout

\begin_layout Plain Layout

	time_t shm_dtime;
\end_layout

\begin_layout Plain Layout

	time_t shm_ctime;
\end_layout

\begin_layout Plain Layout

	void *shm_internal;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The members are defined as:
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
shm_perm
\family default
\series default
 operation permissions;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
shm_segsz
\family default
\series default
 size of segment in bytes;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000
\noindent

\family typewriter
\series bold
shm_lpid
\family default
\series default
 pid of last shm op;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
shm_cpid
\family default
\series default
 pid of creator;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
shm_nattch
\family default
\series default
 number of current attaches;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
shm_atime
\family default
\series default
 last 
\family typewriter
shmat
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmat
\end_layout

\end_inset

 time;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
shm_dtime
\family default
\series default
 last 
\family typewriter
shmdt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmdt
\end_layout

\end_inset


\family default
 time;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
shm_ctime
\family default
\series default
 last change by 
\family typewriter
shmctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmctl
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Labeling
\labelwidthstring 000000.000000.000000

\family typewriter
\series bold
shm_internal
\family default
\series default
 sysv stupidity.
\end_layout

\begin_layout Subsection
The 
\family typewriter
shmget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmget
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard
The 
\family typewriter
shmget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmget
\end_layout

\end_inset


\family default
 function operates on XSI shared memory, it shall return the shared memory
 identifier associated with key.
 It takes three argument:
\end_layout

\begin_layout Itemize
first argument is a key;
\end_layout

\begin_layout Itemize
second argument is the size of the shared memory segment in bytes;
\end_layout

\begin_layout Itemize
third argument is a mask of bits which are flags.
\end_layout

\begin_layout Standard
\noindent
A 
\shape italic
shared memory identifier
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
shared memory identifier
\end_layout

\end_inset


\shape default
, associated data structure, and shared memory segment of at least size
 bytes, see 
\family typewriter
<sys/shm.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/shm.h>
\end_layout

\end_inset


\family default
, are created for key if one of the following is true:
\end_layout

\begin_layout Itemize
\noindent
the first argument is equal to 
\family typewriter
IPC_PRIVATE
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_PRIVATE
\end_layout

\end_inset


\family default
;
\end_layout

\begin_layout Itemize
the first argument does not already have a shared memory identifier
\begin_inset Index idx
status open

\begin_layout Plain Layout
shared memory identifier
\end_layout

\end_inset

 associated with it and the third argument anded with 
\family typewriter
IPC_CREAT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_CREAT
\end_layout

\end_inset


\family default
 is non-zero.
\end_layout

\begin_layout Standard
\noindent
Upon creation, the data structure associated with the new shared memory
 identifier shall be initialized as follows:
\end_layout

\begin_layout Itemize
the values of 
\family typewriter
shm_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.cuid
\end_layout

\end_inset


\family default
, 
\family typewriter
shm_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.uid
\end_layout

\end_inset


\family default
, 
\family typewriter
shm_perm.cgid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.cgid
\end_layout

\end_inset


\family default
 and 
\family typewriter
shm_perm.gid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.gid
\end_layout

\end_inset


\family default
 are set to the effective user id
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective user id
\end_layout

\end_inset

 and effective group id
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective group id
\end_layout

\end_inset

, respectively, of the calling process;
\end_layout

\begin_layout Itemize
the low-order nine bits of 
\family typewriter
shm_perm.mode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.mode
\end_layout

\end_inset


\family default
 are set to the low-order nine bits of third argument;
\end_layout

\begin_layout Itemize
the value of the second argument is set to the value of size;
\end_layout

\begin_layout Itemize
the values of 
\family typewriter
shm_lpid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_lpid
\end_layout

\end_inset


\family default
, 
\family typewriter
shm_nattch
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_nattch
\end_layout

\end_inset


\family default
, 
\family typewriter
shm_atime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_atime
\end_layout

\end_inset


\family default
 and 
\family typewriter
shm_dtime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_dtime
\end_layout

\end_inset


\family default
 are set to 0;
\end_layout

\begin_layout Itemize
the value of 
\family typewriter
shm_ctime
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_ctime
\end_layout

\end_inset


\family default
 is set to the current time.
\end_layout

\begin_layout Standard
\noindent
When the shared memory segment is created, it shall be initialized with
 all zero values.
 Upon successful completion, 
\family typewriter
shmget
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmget
\end_layout

\end_inset


\family default
 shall return a non-negative integer, namely a shared memory identifier;
 otherwise, it shall return -1 and set 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 to indicate the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
shmctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmctl
\end_layout

\end_inset


\family default
 System Call.
\end_layout

\begin_layout Standard

\family typewriter
shmctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmctl
\end_layout

\end_inset


\family default
 system call
\begin_inset Index idx
status open

\begin_layout Plain Layout
system call
\end_layout

\end_inset

 takes three arguments and performs some control operations on the shared
 memory area specified by the first argument.
 Each shared memory segment has a data structure associated with it, parts
 of which may be altered by 
\family typewriter
shmctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmctl
\end_layout

\end_inset


\family default
 and parts of which determine the actions of 
\family typewriter
shmctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmctl
\end_layout

\end_inset


\family default
.
 This structure is defined in 
\family typewriter
<sys/shm.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/shm.h>
\end_layout

\end_inset


\family default
 and it is reported in 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:shmid_ds-struct"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The 
\family typewriter
ipc_perm
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ipc_perm
\end_layout

\end_inset


\family default
 structure used inside the 
\family typewriter
shmid_ds
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmid_ds
\end_layout

\end_inset


\family default
 structure is defined in 
\family typewriter
<sys/ipc.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/ipc.h>
\end_layout

\end_inset


\family default
 which is first reported in 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:ipc_perm-struct"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The operation to be performed by 
\family typewriter
shmctl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmctl
\end_layout

\end_inset


\family default
 is specified in its second argument and is one of:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent

\family typewriter
IPC_STAT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_STAT
\end_layout

\end_inset


\family default
 gather information about the shared memory segment and place it in the
 structure pointed to by the third argument;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
IPC_SET
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_SET
\end_layout

\end_inset


\family default
 set the value of the 
\family typewriter
shm_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.uid
\end_layout

\end_inset


\family default
, 
\family typewriter
shm_perm.gid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.gid
\end_layout

\end_inset


\family default
 and 
\family typewriter
shm_perm.mode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.mode
\end_layout

\end_inset


\family default
 fields in the structure associated with the first argument.
 The values are taken from the corresponding fields in the structure pointed
 to by the third argument.
 This operation can only be executed by the super-user
\begin_inset Index idx
status open

\begin_layout Plain Layout
super-user
\end_layout

\end_inset

 or a process that has an effective user id
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective user id
\end_layout

\end_inset

 equal to either 
\family typewriter
shm_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.cuid
\end_layout

\end_inset


\family default
 or 
\family typewriter
shm_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.uid
\end_layout

\end_inset


\family default
 in the data structure associated with the shared memory segment;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
IPC_RMID
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
IPC_RMID
\end_layout

\end_inset


\family default
 mark the shared memory segment specified by first argument for removal
 when it is no longer in use by any process.
 When it is removed, all data associated with it will be destroyed too.
 Only the superuser or a process with an effective UID
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective UID
\end_layout

\end_inset

 equal to the 
\family typewriter
shm_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.cuid
\end_layout

\end_inset


\family default
 or 
\family typewriter
shm_perm.uid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.uid
\end_layout

\end_inset


\family default
 values in the data structure associated with the queue can do this.
\end_layout

\begin_layout Standard
\noindent
The read and write permissions on a shared memory identifier are determined
 by the 
\family typewriter
shm_perm.mode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.mode
\end_layout

\end_inset


\family default
 field in the same way as is done with files
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\shape italic
chmod
\shape default
(2).
\end_layout

\end_inset

, but the effective UID
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective UID
\end_layout

\end_inset

 can match either the 
\family typewriter
shm_perm.cuid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.cuid
\end_layout

\end_inset


\family default
 field or the 
\family typewriter
shm_perm.uid field
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.uid field
\end_layout

\end_inset


\family default
 and the effective GID
\begin_inset Index idx
status open

\begin_layout Plain Layout
effective GID
\end_layout

\end_inset

 can match either 
\family typewriter
shm_perm.cgid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.cgid
\end_layout

\end_inset


\family default
 or 
\family typewriter
shm_perm.gid
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shm_perm.gid
\end_layout

\end_inset


\family default
.
 Upon successful completion, the value 0 is returned; otherwise the value
 -1 is returned and the global variable 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 is set to indicate the error.
\end_layout

\begin_layout Subsection
The 
\family typewriter
shmat
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmat
\end_layout

\end_inset


\family default
 and 
\family typewriter
shmdt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmdt
\end_layout

\end_inset


\family default
 System Calls.
\end_layout

\begin_layout Standard

\family typewriter
shmat
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmat
\end_layout

\end_inset


\family default
 takes three arguments and it maps the shared memory segment associated
 with the shared memory identifier in the first argument into the address
 space of the calling process.
 The address at which the segment is mapped is determined by the second
 argument.
 If it is equal to 
\family typewriter
NULL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
NULL
\end_layout

\end_inset


\family default
, the system will pick an address itself.
 Otherwise, an attempt is made to map the shared memory segment at the address
 specified in the second argument.
 If 
\family typewriter
SHM_RND
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SHM_RND
\end_layout

\end_inset


\family default
 is set in the third argument, the system will round the address down to
 a multiple of SHMLBA bytes
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
SHMLBA
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SHMLBA
\end_layout

\end_inset


\family default
 is defined in 
\family typewriter
<sys/shm.h>
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
<sys/shm.h>
\end_layout

\end_inset


\family default
.
\end_layout

\end_inset

.
 A shared memory segment can be mapped read-only by specifying the 
\family typewriter
SHM_RDONLY
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SHM_RDONLY
\end_layout

\end_inset


\family default
 flag in the third argument.
 
\family typewriter
shmdt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmdt
\end_layout

\end_inset


\family default
 takes one parameter and unmaps the shared memory segment that is currently
 mapped at the first argument from the calling process' address space.
 This argument must be a value returned by a prior 
\family typewriter
shmat
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmat
\end_layout

\end_inset


\family default
 call.
 A shared memory segment will remain existent until it is removed by a call
 to 
\shape italic
shmctl
\shape default
(2) with the 
\family typewriter
IPC_RMID
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
IPC_RMID
\end_layout

\end_inset


\family default
 command.
 
\family typewriter
shmat
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmat
\end_layout

\end_inset


\family default
 returns the address at which the shared memory segment has been mapped
 into the calling process' address space when successful, 
\family typewriter
shmdt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
shmdt
\end_layout

\end_inset


\family default
 returns 0 on successful completion.
 Otherwise, a value of -1 is returned, and the global variable 
\family typewriter
errno
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
errno
\end_layout

\end_inset


\family default
 is set to indicate the error.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:shm-server"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a small server program that obtains a shared memory segment and puts
 some data into it for a client process to read.
 It then waits until the first element of the segment is changed by the
 client, indicating that the segment has bee read.
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:shm-server"

\end_inset

shm-server - server program to demonstrate shared memory.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* File shm-server.c.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <sys/types.h>
\end_layout

\begin_layout Plain Layout

#include <sys/ipc.h>
\end_layout

\begin_layout Plain Layout

#include <sys/shm.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* shm-server program.
 */
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

#define SHMSZ 32
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char c;
\end_layout

\begin_layout Plain Layout

	char *shm, *s;
\end_layout

\begin_layout Plain Layout

	int shmid;
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

	key_t key;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*
\end_layout

\begin_layout Plain Layout

	 * We'll name our shared memory segment
\end_layout

\begin_layout Plain Layout

	 * "5678".
\end_layout

\begin_layout Plain Layout

	 */
\end_layout

\begin_layout Plain Layout

	key = 5678;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Create the segment.
 */
\end_layout

\begin_layout Plain Layout

	if((shmid = shmget(key, SHMSZ, IPC_CREAT | 0666)) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* Now we attach the segment to our data space.
 */
\end_layout

\begin_layout Plain Layout

		if((shm = shmat(shmid, NULL, 0)) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * Now put some things into the memory for the
\end_layout

\begin_layout Plain Layout

			 * process to read.
\end_layout

\begin_layout Plain Layout

			 */
\end_layout

\begin_layout Plain Layout

			s = shm;
\end_layout

\begin_layout Plain Layout

			for(c = 'a'; c <= 'z'; c++)
\end_layout

\begin_layout Plain Layout

				*s++ = c;
\end_layout

\begin_layout Plain Layout

			*s = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

			printf("Data at 0x%0.8x: %s
\backslash
n", (size_t) shm, (char *) shm);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * Finally, we wait until the other process
\end_layout

\begin_layout Plain Layout

			 * changes the first character of our memory
\end_layout

\begin_layout Plain Layout

			 * to '*', indicating that it has read what
\end_layout

\begin_layout Plain Layout

			 * we put there.
\end_layout

\begin_layout Plain Layout

			 */
\end_layout

\begin_layout Plain Layout

			printf("Waiting for client to change the shared memory.
\backslash
n");
\end_layout

\begin_layout Plain Layout

			while(*shm != '*')
\end_layout

\begin_layout Plain Layout

				sleep(1);
\end_layout

\begin_layout Plain Layout

			printf("Client succesfully modified shared data segment: %s
\backslash
n", shm);
\end_layout

\begin_layout Plain Layout

			ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			perror("shmat");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		perror("shmget");
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of shm-server.c file.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "c:shm-client"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the client program that reads the shared memory segment, prints it
 on the screen and then changes the first element of the segment so that
 the server can exit.
 Before running this program, the server process must be started in the
 background.
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "c:shm-client"

\end_inset

shm-client - client program to demonstrate shared memory.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

/* -*- mode: c; -*- */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* File shm-client.c.
 */
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <unistd.h>
\end_layout

\begin_layout Plain Layout

#include <sys/types.h>
\end_layout

\begin_layout Plain Layout

#include <sys/ipc.h>
\end_layout

\begin_layout Plain Layout

#include <sys/shm.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* shm-client program.
 */
\end_layout

\begin_layout Plain Layout

#define FOREVER for(;;)
\end_layout

\begin_layout Plain Layout

#define SHMSZ 32
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Functions prototypes.
 */
\end_layout

\begin_layout Plain Layout

int main(int, char *[]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Main function.
 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char c;
\end_layout

\begin_layout Plain Layout

	char *shm, *s;
\end_layout

\begin_layout Plain Layout

	int shmid;
\end_layout

\begin_layout Plain Layout

	long int ret = EXIT_FAILURE;
\end_layout

\begin_layout Plain Layout

	key_t key;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*
\end_layout

\begin_layout Plain Layout

	 * We need to get the segment named
\end_layout

\begin_layout Plain Layout

	 * "5678", created by the server.
\end_layout

\begin_layout Plain Layout

	 */
\end_layout

\begin_layout Plain Layout

	key = 5678;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Locate the segment.
 */
\end_layout

\begin_layout Plain Layout

	if((shmid = shmget(key, SHMSZ, 0666)) >= 0) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* Now we attach the segment to our data space.
 */
\end_layout

\begin_layout Plain Layout

		if((shm = shmat(shmid, NULL, 0)) >= 0) {
\end_layout

\begin_layout Plain Layout

			printf("Server data at 0x%0.8x: ", (size_t) shm);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/* Now we read what the server put in the memory.
 */
\end_layout

\begin_layout Plain Layout

			for(s = shm; *s != '
\backslash
0'; s++)
\end_layout

\begin_layout Plain Layout

				putchar(*s);
\end_layout

\begin_layout Plain Layout

			putchar('
\backslash
n');
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * Finally, change the first character of the
\end_layout

\begin_layout Plain Layout

			 * segment to '*', indicating we have read
\end_layout

\begin_layout Plain Layout

			 * the segment.
\end_layout

\begin_layout Plain Layout

			 */
\end_layout

\begin_layout Plain Layout

			*shm = '*';
\end_layout

\begin_layout Plain Layout

			ret = EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

		} else
\end_layout

\begin_layout Plain Layout

			perror("shmat");
\end_layout

\begin_layout Plain Layout

	} else
\end_layout

\begin_layout Plain Layout

		perror("shmget");
\end_layout

\begin_layout Plain Layout

	exit(ret);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* End of shm-client.c file.
 */
\end_layout

\end_inset


\end_layout

\end_body
\end_document
